<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>NSBogan</title>
        <description>NSBogan - Maksym Grebenets</description>
        <link>http://mgrebenets.github.io</link>
        <link>http://mgrebenets.github.io</link>
        <lastBuildDate>2015-02-05T16:06:04+11:00</lastBuildDate>
        <pubDate>2015-02-05T16:06:04+11:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Xcode Derived Data</title>
                <description>
</description>
                <link>http://mgrebenets.github.io/2015/02/01/xcode-derived-data</link>
                <guid>http://mgrebenets.github.io/2015/02/01/xcode-derived-data</guid>
                <pubDate>2015-02-01T00:00:00+11:00</pubDate>
        </item>

        <item>
                <title>Mobile CI Daemon vs Agent</title>
                <description>
</description>
                <link>http://mgrebenets.github.io/2015/02/01/mobile-ci-daemon-vs-agent</link>
                <guid>http://mgrebenets.github.io/2015/02/01/mobile-ci-daemon-vs-agent</guid>
                <pubDate>2015-02-01T00:00:00+11:00</pubDate>
        </item>

        <item>
                <title>Mobile CI & OSX Keychain</title>
                <description>
</description>
                <link>http://mgrebenets.github.io/2015/02/01/mobile-ci--osx-keychain</link>
                <guid>http://mgrebenets.github.io/2015/02/01/mobile-ci--osx-keychain</guid>
                <pubDate>2015-02-01T00:00:00+11:00</pubDate>
        </item>

        <item>
                <title>Mobile CI & iOS Simulator</title>
                <description>
</description>
                <link>http://mgrebenets.github.io/2015/02/01/mobile-ci--ios-simulator</link>
                <guid>http://mgrebenets.github.io/2015/02/01/mobile-ci--ios-simulator</guid>
                <pubDate>2015-02-01T00:00:00+11:00</pubDate>
        </item>

        <item>
                <title>Jenkins Remote Node</title>
                <description>
</description>
                <link>http://mgrebenets.github.io/2015/02/01/jenkins-remote-node</link>
                <guid>http://mgrebenets.github.io/2015/02/01/jenkins-remote-node</guid>
                <pubDate>2015-02-01T00:00:00+11:00</pubDate>
        </item>

        <item>
                <title>Jenkins CI Server on OSX</title>
                <description>
</description>
                <link>http://mgrebenets.github.io/2015/02/01/jenkins-ci-server-on-osx</link>
                <guid>http://mgrebenets.github.io/2015/02/01/jenkins-ci-server-on-osx</guid>
                <pubDate>2015-02-01T00:00:00+11:00</pubDate>
        </item>

        <item>
                <title>Bamboo Remote Agent</title>
                <description>
&lt;p&gt;use these links
https://confluence.atlassian.com/display/BAMBOO021/Running+Bamboo+behind+a+firewall+with+Remote+Agents+outside+the+firewall&lt;/p&gt;

&lt;p&gt;why it can’t sit in the cloud
https://answers.atlassian.com/questions/22655/bamboo-mac-agent&lt;/p&gt;

&lt;p&gt;how to get the jar
how to configure it’s launch
how to make it a launch agent (and why not launch daemon)
how to configure plist, what are other options around that
what’s the purpose of .sh runner script and how it relates to jar&lt;/p&gt;

&lt;p&gt;fails to get fingerprint and other stuff&lt;/p&gt;

&lt;p&gt;put all the notes about failover url
it must have a host name or ip when both are running in local environment&lt;/p&gt;

&lt;p&gt;it must have an ip (hostname won’t work) when server is outside your network (e.g. aws cloud)&lt;/p&gt;

&lt;p&gt;how to enable logging and use it for debugging problems&lt;/p&gt;

&lt;p&gt;keychain: might be good as a separate note
how to unlock keychain for it (all the keys)
how to unlock keychain as part of build scripts (might be good as a separate note)&lt;/p&gt;

&lt;p&gt;simulator: separate note
how to enable dev mode on the machine (and why)
how to work with simulator, reset it (via ios-sim old days, via xcrun since xcode 6)&lt;/p&gt;

&lt;p&gt;derived data - separate and very short note&lt;/p&gt;

&lt;p&gt;note on the Docker with the link I saw once&lt;/p&gt;
</description>
                <link>http://mgrebenets.github.io/2015/02/01/bamboo-remote-agent</link>
                <guid>http://mgrebenets.github.io/2015/02/01/bamboo-remote-agent</guid>
                <pubDate>2015-02-01T00:00:00+11:00</pubDate>
        </item>

        <item>
                <title>Bamboo Group Agent</title>
                <description>
&lt;p&gt;what is it for? why do you need to use it?
example: a setup with server and agents in the cloud
and self-hosted mac agent&lt;/p&gt;

&lt;p&gt;most plans will expect default capabilities because all the agents are same (cloned)
so there’s no need to define those special capabilities most of the time
so you have a swarm of build plans with no capabilities
and any of those will be more than happy to jump on your mac agent&lt;/p&gt;

&lt;p&gt;solution:
a - tell other devs to fix their plans - unreal, most plans were created ages ago and it’s just difficult to carry such work trying to orchestrate so many other peeps
a.a - fix them yourself - hah!&lt;/p&gt;

&lt;p&gt;b - use group agent
group agent marks the agent as part  of a group
only plans belonging to this group can run on this agent
you list groups separated by comma when configuring it
this part prevents all other build plans from using group agent&lt;/p&gt;

&lt;p&gt;when creating plans you mark them as requiring build agent
this part locks your plan to a group agent&lt;/p&gt;

&lt;p&gt;drawbacks:
lock the entire plan, no way to lock on job basis
with a typical ios plan, only build, unit test and some packaging/signing requires OSX (xcode)
all the rest (upload to hockey, testflight, etc., reporting, ) only needs build artifacts and network access
depending on your plan only 20% to 50% os actual jobs need OSX,
since mac agent is a scarce resource you’d benefit from running all the other jobs on cloud agents
but it’s not possible&lt;/p&gt;

&lt;p&gt;reason:
there isn’t much to be done
the API (URL) that atlassian provides for plugin developers only allows filtering target agents for the plan
there’s no granular control for jobs
so just accept the reality and look for ways to optimize the non-OSX parts of the build plan&lt;/p&gt;

&lt;p&gt;another drawback: deployment projects
describe the problem, provide the solution
add link to a custom group agent plugin build&lt;/p&gt;
</description>
                <link>http://mgrebenets.github.io/2015/02/01/bamboo-group-agent</link>
                <guid>http://mgrebenets.github.io/2015/02/01/bamboo-group-agent</guid>
                <pubDate>2015-02-01T00:00:00+11:00</pubDate>
        </item>

        <item>
                <title>Bamboo CI Server on OSX</title>
                <description>
</description>
                <link>http://mgrebenets.github.io/2015/02/01/bamboo-ci-server-on-osx</link>
                <guid>http://mgrebenets.github.io/2015/02/01/bamboo-ci-server-on-osx</guid>
                <pubDate>2015-02-01T00:00:00+11:00</pubDate>
        </item>

        <item>
                <title>Bamboo vs Jenkins</title>
                <description>
&lt;p&gt;A [biased and subjective] comparison of Bamboo and Jenkins as CI servers for mobile, based on practical experience with both.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Continuous Integration and Continuous Deployment (Delivery, Distribution) has been around for quite a while. But surprisingly enough on a global scale it pretty much just got into its teen years in regards to Mobile. Well, subjectively, of course.&lt;/p&gt;

&lt;p&gt;You can see all levels of mobile CI these days. Some would still install builds from Xcode, others would have a quickly patched up build server under their desk. Xcode Bots meets the needs of yet another group of people. Travis CI is good and for open source projects it’s probably the best option.&lt;/p&gt;

&lt;p&gt;The advanced level of CI would include distributed build systems with multiple build nodes, support for automated unit and UI tests, running tests on physical devices, automatic deployment to TestFlight, Hockey App, Over the Air, and much more. It becomes not just mobile development, but spans into areas like DevOps and others. &lt;a href=&quot;https://codeascraft.com/2014/02/28/etsys-journey-to-continuous-integration-for-mobile-apps/&quot;&gt;Etsy’s blog post&lt;/a&gt; is a good example of where this path can take you.&lt;/p&gt;

&lt;p&gt;If you decide to take mobile CI seriously, you have to pick a build server to start with.&lt;/p&gt;

&lt;p&gt;I personally have worked with Bamboo for 1.5 years and I’m dealing with Jenkins right now, so I have few insights and can give some comparison of the two.&lt;/p&gt;

&lt;h2 id=&quot;setup--configuration&quot;&gt;Setup &amp;amp; Configuration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;/2015/02/01/bamboo-ci-server-on-osx&quot;&gt;Bamboo installation&lt;/a&gt; and &lt;a href=&quot;/2015/02/01/jenkins-ci-server-on-osx&quot;&gt;Jenkins installation&lt;/a&gt; tasks are about the same in terms of time and knowledge required. While installing one of the two you’ll climb a certain learning curve which will help you heaps if you ever have to deal with second option.&lt;/p&gt;

&lt;p&gt;Both are built using Java, both will need a database setup. Jenkins and Bamboo will setup and configure &lt;a href=&quot;http://en.wikipedia.org/wiki/MySQL&quot;&gt;MySQL&lt;/a&gt; by default, however, Bamboo will recommend you to configure custom database like &lt;a href=&quot;http://en.wikipedia.org/wiki/PostgreSQL&quot;&gt;PostgreSQL&lt;/a&gt; for production environment.&lt;/p&gt;

&lt;p&gt;Being Java applications both will require similar JVM configuration. Default configuration won’t really serve you well. You’ll experience out of memory issues as soon as you add a couple of basic build plans/jobs.&lt;/p&gt;

&lt;p&gt;And lot’s of other things are similar: configuration behind proxy, login vs non-login user (&lt;a href=&quot;/2015/02/01/mobile-ci-daemon-vs-agent&quot;&gt;Launch Agent vs Daemon&lt;/a&gt;), &lt;a href=&quot;/2015/02/01/mobile-ci--osx-keychain&quot;&gt;OSX Keychain&lt;/a&gt;, &lt;a href=&quot;/2015/02/01/mobile-ci--ios-simulator&quot;&gt;iOS Simulator&lt;/a&gt;, etc.&lt;/p&gt;

&lt;h2 id=&quot;gui&quot;&gt;GUI&lt;/h2&gt;
&lt;p&gt;Obviously, this is not a comparison criteria at all. This criteria is as subjective as it could possibly be!&lt;/p&gt;

&lt;p&gt;Out of the box Bamboo UI looks much better than Jenkins version.&lt;/p&gt;

&lt;p&gt;With Jenkins there are ways to improve your day to day user experience. You can customize theme and even make your custom UI improvements, like adding “Build Now” button where you like it.&lt;/p&gt;

&lt;p&gt;You should start by installing &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Simple+Theme+Plugin&quot;&gt;Simple Theme Plugin&lt;/a&gt; and then configure it with one of the available themes. Not all the themes will look good, it all depends on the Jenkins version you have and browser you use, etc. I tried a buch of them and ironically enough the only theme that looks good on our production CI box is called &lt;a href=&quot;https://github.com/djonsson/jenkins-atlassian-theme&quot;&gt;“Atlassian”&lt;/a&gt;. But I’m dealing with slightly outdated Jenkins version, you could get better results with up to date Jenkins.&lt;/p&gt;

&lt;h2 id=&quot;plugins&quot;&gt;Plugins&lt;/h2&gt;
&lt;p&gt;This is where the large community plays it’s role. Subjectively or not, Jenkins has a larger choice of plugins of all kinds, starting from management and organization of build jobs and ending up with reporting.&lt;/p&gt;

&lt;p&gt;While Bamboo supports lots of job management features out of the box, reporting plugins is something that needs to be improved.&lt;/p&gt;

&lt;p&gt;TODO: take the plugins I use (PMD, Cobertura, Unit Tests, HTML publisher, SLOC)
TODO: note that jenkins shows graphics with trends&lt;/p&gt;

&lt;p&gt;And then there is the Mother and the Farther of all Jenkins plugins - &lt;a href=&quot;&quot;&gt;Jenkins Job DSL Plugin&lt;/a&gt;. Short summary: it allows you to manage your configuration as a code.&lt;/p&gt;

&lt;p&gt;Check out this good talk and resources (TODO: put more links as a reference) to find out more.&lt;/p&gt;

&lt;p&gt;I plan to write a post about my personal experience with using Job DSL plugin.&lt;/p&gt;

&lt;h2 id=&quot;build-jobplan-structure&quot;&gt;Build Job/Plan Structure&lt;/h2&gt;

&lt;p&gt;There is a bit of confusion caused by terminology used by Bamboo and Jenkins.&lt;/p&gt;

&lt;h3 id=&quot;bamboo&quot;&gt;Bamboo&lt;/h3&gt;

&lt;p&gt;With Bamboo you start by creating Build &lt;em&gt;Plan&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Each plan consists of one ore more Build &lt;em&gt;Stages&lt;/em&gt;. Stages run in &lt;strong&gt;sequential&lt;/strong&gt; order. If one stage fails next stages are never executed. Stages can be configured as manual to be triggered by hand.&lt;/p&gt;

&lt;p&gt;Stages contain Build &lt;em&gt;Jobs&lt;/em&gt;. Build jobs in one stage can run in &lt;strong&gt;parallel&lt;/strong&gt; if there’s enough build agents for that. Each job can require different capabilities and can be dispatched to run on some designated build agent. Build jobs may produce Build &lt;em&gt;Artefacts&lt;/em&gt; and share them with other jobs in consequent stages. Since jobs are parallelized, if one of them fails other jobs will still keep running until they finish on their own.&lt;/p&gt;

&lt;p&gt;Finally each job is made of Build &lt;em&gt;Tasks&lt;/em&gt;. Tasks run in order from top to bottom. A task may be a basic shell script or one of the many tasks provided via plugins. Here’s a generalized example of a job and it’s tasks. One large and important group of taks is reporting tasks.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Checkout git repository&lt;/li&gt;
  &lt;li&gt;Build&lt;/li&gt;
  &lt;li&gt;Test&lt;/li&gt;
  &lt;li&gt;Deploy&lt;/li&gt;
  &lt;li&gt;Generate test report&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A summary of a Build Plan structure&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Build Stage
    &lt;ul&gt;
      &lt;li&gt;Build Job
        &lt;ul&gt;
          &lt;li&gt;Task&lt;/li&gt;
          &lt;li&gt;Task&lt;/li&gt;
          &lt;li&gt;[&lt;em&gt;more tasks&lt;/em&gt;]&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;[&lt;em&gt;more jobs&lt;/em&gt;]&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;[&lt;em&gt;more stages&lt;/em&gt;]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Not so Parallel&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Bamboo deserves a special side-note in regards to parallel job execution and iOS build plans.&lt;/p&gt;

&lt;p&gt;As I mentioned before, the way you assign build jobs to local or remote agents is via capabilities. An agent defines capabilities it has, a job declares capabilities it wants, and then Bamboo matches the two.&lt;/p&gt;

&lt;p&gt;If you are in total control of your CI setup and mobile team is the only one using your particular Bamboo server and all agents, you have all the power to set all the agents capabilities and then enforce a requirement that all build jobs created by you or your teammates must explicitly specify which capabilities they need. This way you’ll harness the full power of distributed configuration, all build jobs will run only on the agents they really should run on.&lt;/p&gt;

&lt;p&gt;Another situation is when mobile CI is a new addition to company CI setup. There is already a CI server and few dozens of build agents and a lot of other teams using this CI configuration. Lots of teams with lots of plans created over the years.&lt;/p&gt;

&lt;p&gt;Now imagine that you are adding your specialized Mac build agent to be used for Xcode builds only. You setup and configure remote Mac agent, connect it to the server and… all the other build plans start jumping on your Mac agent! That’s because 99% of those plans declare no capabilities they require, they simply expect that all the agents are identical in terms of capabilities. And that works because all the agents are indeed identical clones. Well &lt;em&gt;were&lt;/em&gt; identical clones until a new Mac agent was added.&lt;/p&gt;

&lt;p&gt;There’s no easy fix to this problem and you can tackle it in one of 2 ways.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Ideal Solution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ideally, CI must be done right. All the build plans must be maintained, updated and removed if no longer needed. As a requirement, all build plans must explicitly declare capabilities they require to be able run. This is something to be enforced at team management level. Company has to have guidelines for creating and managing build plans and there must be a person or even a team (Dev Support team) responsible for keeping guidelines up to date and enforcing them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Down to Earth Solution&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The reality is rough. The number of existing plans is overhelming, it will take months to chase people responsible for each build plan and communicate the importance of declaring capabilities to them. The whole change has to be made in a safe way so it doesn’t break existing workflows and production deployments.&lt;/p&gt;

&lt;p&gt;You don’t have months of waiting allocated in your schedule, you need mobile CI running ASAP. One thing you could do is to setup your own CI server just for mobile and essentially move to “under the desk” setup. This way you get no support from Dev Support team (given that you have one) and all the trouble of setting up, configuring and supporting the server and agents is now yours.&lt;/p&gt;

&lt;p&gt;However, you still can do mobile CI as part of company wide CI. There is a plugin that will help you - &lt;a href=&quot;/2015/02/01/bamboo-group-agent&quot;&gt;Bamboo Group Agent plugin&lt;/a&gt;. Have a read if you interested, Group Agent plugin offers a solution which is not fully flexible, but will help with original problem.&lt;/p&gt;

&lt;h3 id=&quot;jenkins&quot;&gt;Jenkins&lt;/h3&gt;

&lt;p&gt;With Jenkins you start by creating Build Project, which is on occasions called &lt;em&gt;Build Job&lt;/em&gt; causing certain confusion. In this post I’ll stick with Project term.&lt;/p&gt;

&lt;p&gt;By default all you get is a basic Freestyle project that includes&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Description&lt;/li&gt;
  &lt;li&gt;Parameters&lt;/li&gt;
  &lt;li&gt;Build Triggers&lt;/li&gt;
  &lt;li&gt;Build Environment&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Build Steps&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Post-build Actions&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you draw an analogy to Bamboo, then all you get is a build &lt;em&gt;plan&lt;/em&gt; with single &lt;em&gt;stage&lt;/em&gt; containing single &lt;em&gt;job&lt;/em&gt; and list of &lt;em&gt;tasks&lt;/em&gt; (Build Steps and Post-build Actions are nothing but tasks). That’s it. There are no stages and no way to run anything in parallel.&lt;/p&gt;

&lt;p&gt;This is where plugins get into play. &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Multijob+Plugin&quot;&gt;Mutlijob Plugin&lt;/a&gt; does exactly the same thing as Bamboo. Stages are called &lt;em&gt;Phases&lt;/em&gt;, phases include &lt;em&gt;Jobs&lt;/em&gt;. Jobs run in &lt;strong&gt;parallel&lt;/strong&gt; when possible, while phases execution order is sequential.&lt;/p&gt;

&lt;p&gt;One very important distinction is that jobs in multi job project are actually references to existing build projects.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Multi Job Build Project
    &lt;ul&gt;
      &lt;li&gt;Build Phase
        &lt;ul&gt;
          &lt;li&gt;Build Job 1 –&amp;gt; Build Project 1&lt;/li&gt;
          &lt;li&gt;Build Job 2 –&amp;gt; Build Project 2&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In theory you can have a multi job project that includes a job which is a multi job project… You could even unintentionally create build job retain cycles and an infinite build loop.&lt;/p&gt;

&lt;p&gt;Multijob Plugin support is added to &lt;a href=&quot;https://github.com/jenkinsci/job-dsl-plugin/wiki/Job-reference#multijob-phase&quot;&gt;Job DSL Plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once again with a fair bit of work Jenkins can match Bamboo’s default functionality and then with another fair bit of work can surpass it.&lt;/p&gt;

&lt;p&gt;Jenkins is still prone to the same problem Bamboo is when it comes to adding iOS build nodes to existing infrastructure. Chances are high your Mac build node will be used by all the other build projects if capabilities are not configured properly. In Jenkins world there are no capabilities as such, instead labels are used. Each build node can be labeled with multiple labels and build jobs can use complex logic expression to specify target nodes they want to run on. But then, if labels were not used in your corporate CI from day the amount of work required for labelling existing build projects can be too big. At this moment I am not aware of a Jenkins analogue of Bamboo Group Agent.&lt;/p&gt;

&lt;h2 id=&quot;pipelines&quot;&gt;Pipelines&lt;/h2&gt;

&lt;p&gt;TODO: work on pipelines, how bamboo does that&lt;/p&gt;

&lt;p&gt;https://wiki.jenkins-ci.org/display/JENKINS/Join+Plugin
https://wiki.jenkins-ci.org/display/JENKINS/Promoted+Builds+Plugin&lt;/p&gt;

&lt;h2 id=&quot;branch-management&quot;&gt;Branch Management&lt;/h2&gt;

&lt;p&gt;TODO:&lt;/p&gt;

&lt;p&gt;why this is important?
why would you get builds for branches rather than waiting for PRs and their merge
examples with testers being able to test feature while it’s being developed in feature branch
this way feature is tested before it get’s merged to main branch
can possibly catch bugs earlier this way
can have customized builds with something really special to be prepared and made available for stake holders&lt;/p&gt;

&lt;p&gt;bamboo - does a great job with it’s feature to automatically create plan branches
nice support for aging, for permanent branches, for branch name regex, etc.
very good support for upstream and downstream merges (branch updater and branch keeper)
will help to detect merge conflicts earlier
branches are nicely organized in UI
mention the fact about plan dependencies
a child plan branches can be matched up to parent plan branches
and child plan will pick up build artifacts from matching parent plan
etc.&lt;/p&gt;

&lt;p&gt;jenkins
by default - nothing like that at all
the most popular Git plugin is shaped up for development mode other than mobile
it allows to specify multiple branches but then those will be just merged before the build, that’s not having a plan for a branch
alternatives (list 3) are somewhat closer but not quite there anyway
the best of them was multi-job plugin (imho)
but i could not get branch filtering working and had to create plans for all branches
doesn’t have branch merging strategies configurable
not much on branch ageing (check)
can’t tell much on handling child plans in regards to branches&lt;/p&gt;

&lt;p&gt;however, the mentioned before job dsl plugin can take care of it all
with a bit of groovy scripting you can get the branch filtering, aging and the rest
you can nicely organized branch jobs into views and folders and have total control over it
you can generate and upate child plans the way you want it
same goes for branch merging strategies
in many ways, when used right (with a bit of effort though) job dsl plugin does all what bamboo does
and then more&lt;/p&gt;

&lt;h2 id=&quot;distributed-builds&quot;&gt;Distributed Builds&lt;/h2&gt;
&lt;p&gt;Both Bamboo and Jenkins have support for distributed builds. Bamboo is using &lt;a href=&quot;https://confluence.atlassian.com/display/BAMBOO/Bamboo+remote+agent+installation+guide&quot;&gt;Remote Agents&lt;/a&gt; while Jenkins calls them &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Distributed+builds&quot;&gt;Remote Nodes&lt;/a&gt;, sometimes referred as slave nodes.&lt;/p&gt;

&lt;p&gt;A side note - both servers support local build agents/nodes as well. Those are running locally (as the name suggests) on the same hardware as the build server.&lt;/p&gt;

&lt;p&gt;Back to remote agents/nodes. Complexity of setting them up and configuring doesn’t vary much between the two CI servers.&lt;/p&gt;

&lt;p&gt;Both will suffer from issues caused by sitting behind the company proxy, specifically if the server is located somewhere outside your company network (e.g. in AWS cloud).&lt;/p&gt;

&lt;p&gt;Why the server is in the cloud and the agent/node is not? - you’d ask. Well, that takes us to next topic.&lt;/p&gt;

&lt;h2 id=&quot;mac-support&quot;&gt;Mac Support&lt;/h2&gt;
&lt;p&gt;Right, this whole comparison is focusing on Mobile CI after all, meaning you have to deal with one of the most popular mobile platforms these days - that is iOS.&lt;/p&gt;

&lt;p&gt;To build an iOS app you must have Xcode, which can run only on OSX (unless you want to follow the path of certain insanity and make it work on other OS).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hackintosh&lt;/em&gt;? Not a very good idea I’d say. The company does iOS development and wants to go with Hackintosh to setup OSX build server, really?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Cloud (aka OnDemand)&lt;/em&gt;? Could be a really good option, but not with industry giants like AWS. AWS or alike is where you’d go if using Bamboo OnDemand feature. I can find posts as old as 2011 discussing this issue: &lt;a href=&quot;https://answers.atlassian.com/questions/22655/bamboo-mac-agent&quot;&gt;one&lt;/a&gt;, [two]((https://jira.atlassian.com/browse/BAM-11870). Apple doesn’t make it easy to run virtual OSX instances to the extent that none of the big cloud providers are brave enough to provide official support for this feature. These days you can go with one of the many Mac Mini colocation services. You either rent a Mac hardware or even provide your own.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Self-hosted&lt;/em&gt;? This is also an option. If your company has security concerns about those Mac hosting providers, or doesn’t want to spend money for that, or for any other reason, you can always purchase Mac hardware and host it in your data center.&lt;/p&gt;

&lt;p&gt;Whenever you are using self-hosting or remote hosting, you end up dealing with native hardware. I find that Mac Minis with maximized CPU, RAM, and SSD storage are perfect candidates for iOS CI box. The more you have the better.&lt;/p&gt;

&lt;p&gt;Next step is to install remote agent/node and get it running. As I mentioned already, installing &lt;a href=&quot;/2015/02/01/bamboo-remote-agent&quot;&gt;remote agent for Bamboo&lt;/a&gt; is around the same complexity as installing &lt;a href=&quot;/2015/02/01/jenkins-remote-node&quot;&gt;remote node for Jenkins&lt;/a&gt;. The problems start popping up when you begin using them.&lt;/p&gt;

&lt;h3 id=&quot;bamboo-remote-agent&quot;&gt;Bamboo Remote Agent&lt;/h3&gt;
&lt;p&gt;Thins you definitely need to know in regards to Bamboo remote agent.&lt;/p&gt;

&lt;p&gt;[The rumor has it that] Atlassian are using Mac OSX to develop their products, including Bamboo, but OSX is never ever listed as &lt;em&gt;officially&lt;/em&gt; supported. Indeed, why would you choose to run your JIRA, Stash, Bamboo, whatever, on OSX server? Hopefully with increasing demand for iOS CI Atlassian will put a bit higher priority on fixing Bamboo issues for OSX, and there’s plenty btw.&lt;/p&gt;

&lt;p&gt;Before you even start using remote agent on OSX, you have to experience a bit of pain &lt;a href=&quot;/2015/02/01/bamboo-remote-agent&quot;&gt;when trying to set it up&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Major and the most important group of issues is related to &lt;strong&gt;Artefacts Sharing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Whenever your remote agent finishes a build stage it is most often producing build artefacts. It &lt;em&gt;doesn’t matter&lt;/em&gt; if those artefacts are shared or not, they must be copied to the server anyway. That is part of distributed build system. Your remote agent can go offline any time, your build plan jobs can run on different agents with different capabilities and artefacts must be passed from one agent to another. All in all, the reality is - the artefacts must be shared.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem Proxy&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Is your remote agent behind proxy? May I introduce you to &lt;a href=&quot;http://en.wikipedia.org/wiki/Chunked_transfer_encoding&quot;&gt;HTTP 1.1 Chunked Transfer Encoding&lt;/a&gt; then? Well, not to the feature itself, but how it relates to Bamboo: &lt;a href=&quot;https://jira.atlassian.com/browse/BAM-5182&quot;&gt;BAM-5182&lt;/a&gt;, &lt;a href=&quot;https://confluence.atlassian.com/pages/viewpage.action?pageId=420971598&quot;&gt;more&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Bamboo server requires support of HTTP chunked transfer feature of 1.1 protocol version to pick up artefacts. If your proxy doesn’t support this feature, you are in trouble. Strictly speaking, this is not Bamboo’s problem, this is the problem of your company network team. HTTP 1.1 standard was released in &lt;a href=&quot;http://www.w3.org/Protocols/rfc2616/rfc2616.html&quot;&gt;1999&lt;/a&gt;! There is a lot of http proxy implementations that support it, &lt;a href=&quot;http://nginx.org/en/&quot;&gt;nginx&lt;/a&gt; for example. However, things move really slow in most of big companies when it comes to changing network infrastructure. If you are so unlucky and you company is still stuck around 1999 in terms of network infrastructure, you will most likely have to find a work-around rather than waiting months and months before you get any progress on proxy upgrade.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Problem Atlassian&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But wait then! Too early to take all the blame off the Atlassian’s shoulders!&lt;/p&gt;

&lt;p&gt;First of all, Bamboo remote agent JAR &lt;a href=&quot;https://answers.atlassian.com/questions/75941/remote-agent-not-honoring-the-dhttp-nonproxyhosts-parameter&quot;&gt;totally disrespects JVM flags for http proxy whitelist (nonProxyHosts)&lt;/a&gt;, &lt;a href=&quot;https://jira.atlassian.com/browse/BAM-12041&quot;&gt;upvote!&lt;/a&gt; You can find ways around this issue, for example re-routing network calls using tools like &lt;a href=&quot;http://squidman.net/squidman/&quot;&gt;SquidMan&lt;/a&gt;, but then you will face &lt;em&gt;The Final Blocker&lt;/em&gt;: &lt;a href=&quot;https://jira.atlassian.com/browse/BAM-8111&quot;&gt;BAM!&lt;/a&gt;, &lt;a href=&quot;https://jira.atlassian.com/browse/BAM-8226&quot;&gt;BAM!&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yes, Bamboo remote agent &lt;a href=&quot;https://jira.atlassian.com/browse/BAM-8111?focusedCommentId=622466&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-622466&quot;&gt;is 27 (&lt;em&gt;twenty seven!&lt;/em&gt;) times slower than plain scp&lt;/a&gt; (&lt;a href=&quot;http://en.wikipedia.org/wiki/Secure_copy&quot;&gt;secure copy over ssh&lt;/a&gt;) command when it comes to copying a single &lt;code&gt;.zip&lt;/code&gt; file which is around few hundred Mb of size.&lt;/p&gt;

&lt;p&gt;Imagine that after spending all the time trying to figure out issues around your proxy and enable the agent to share artefacts with the server you end up facing this beast? It renders all your distributed build setup useless, it takes way more time to copy build artefacts than to produce them. From reports it looks like this issue is specific for Mac OS build agents only.&lt;/p&gt;

&lt;p&gt;When I faced this problem I ended up sharing artefacts via Amazon S3 bucket. This is extra work, extra shell scripts to upload and download artefacts, additional expenses for S3 bucket. You become responsible for managing outdated artefacts, you are the one who has to account for multiple build plan branches, and much more. This is really a bit too much of overhead and it is extra annoying when you know this is a core Bamboo functionality and it’s &lt;strong&gt;supposed to work right out of the box&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;jenkins-remote-node&quot;&gt;Jenkins Remote Node&lt;/h3&gt;

&lt;p&gt;TODO:&lt;/p&gt;
</description>
                <link>http://mgrebenets.github.io/mobile%20ci/2015/01/29/bamboo-vs-jenkins</link>
                <guid>http://mgrebenets.github.io/mobile%20ci/2015/01/29/bamboo-vs-jenkins</guid>
                <pubDate>2015-01-29T00:00:00+11:00</pubDate>
        </item>

        <item>
                <title>Swift Dictionary Literal Convertible</title>
                <description>
&lt;p&gt;A practical example of Swift’s &lt;code&gt;DictionaryLiteralConvertible&lt;/code&gt; protocol application.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;If “Literal Convertibles” sounds strange to you then a good place to start is an excellent &lt;a href=&quot;http://nshipster.com/swift-literal-convertible/&quot;&gt;NSHipster’s post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;OK, let’s say we have some struct in Swift.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Timeout failed.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a structure holding timeout options for some abstract waiting function. If waiting takes longer that &lt;code&gt;timeout&lt;/code&gt; then waiting is terminated and the &lt;code&gt;message&lt;/code&gt; is displayed. For convenience default values are provided.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Waiting for \(options.timeout). Message: \(options.message)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// TODO: wait for some condition and fail after timeout&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Custom timeout failed.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, wouldn’t it be nice to add some syntactic sugar and pass a dictionary with key-value pairs for waiting options, instead of calling &lt;code&gt;Options&lt;/code&gt; initializer?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course compiler doesn’t like this code, though it fails to tell us exactly why.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Options&amp;#39;&lt;/span&gt; does not have a member named &lt;span class=&quot;s1&quot;&gt;&amp;#39;Value&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s experiment a bit.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;SomeString&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Doesn’t make much sense but this time compiler complains with more sane error message.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Type &lt;span class=&quot;s1&quot;&gt;&amp;#39;Options&amp;#39;&lt;/span&gt; does not conform to protocol &lt;span class=&quot;s1&quot;&gt;&amp;#39;StringLiteralConvertible&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Basically it doesn’t know how to construct and instance of &lt;code&gt;Options&lt;/code&gt; type from &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So when we used dictionary before, compiler had no idea how to create an instance of &lt;code&gt;Options&lt;/code&gt; from a dictionary, but sadly couldn’t communicate it back to us in a human-friendly form.&lt;/p&gt;

&lt;p&gt;To be able to create &lt;code&gt;Options&lt;/code&gt; objects from dictionaries &lt;code&gt;Options&lt;/code&gt; has to conform to &lt;code&gt;DictionaryLiteralConvertible&lt;/code&gt; protocol.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;/// Conforming types can be initialized with dictionary literals&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DictionaryLiteralConvertible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;/// Create an instance initialized with `elements`.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dictionaryLiteral&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)...)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To conform to this protocol we need to implement &lt;code&gt;init&lt;/code&gt; and define type aliases for &lt;code&gt;Key&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt;. This was somewhat of a surprise for me, even when reading NSHipster’s post for the first time I didn’t realize that typealias are part of the protocol and had to be “implemented” (declared) too. I must have confused &lt;code&gt;typealias&lt;/code&gt; with C’s &lt;code&gt;typedef&lt;/code&gt; for a while, hence misunderstanding of &lt;code&gt;typealias&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;OK, first attempt in conforming to the protocol.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DictionaryLiteralConvertible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyObject&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dictionaryLiteral&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)...)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fatalError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Unknown key: \(key)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For dictionary keys the &lt;code&gt;String&lt;/code&gt; type is used, and for values use &lt;code&gt;AnyObject&lt;/code&gt; since we can pass either &lt;code&gt;Double&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; as a value.&lt;/p&gt;

&lt;p&gt;I’m sure there’s a better more type-safe way to type alias &lt;code&gt;Value&lt;/code&gt; to make it more “functional”. Probably using enums. I’m still learning though.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;init&lt;/code&gt; iterates over the contents of the dictionary and initializes struct’s members with values from the dictionary. The &lt;code&gt;as&lt;/code&gt; is used to type cast &lt;code&gt;AnyObject&lt;/code&gt; to &lt;code&gt;Double&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I’m aware that use of &lt;code&gt;self&lt;/code&gt; is not strictly required in this case and &lt;code&gt;self.timeout =&lt;/code&gt; works same as just &lt;code&gt;timeout =&lt;/code&gt;, but I tend to explicitly use &lt;code&gt;self.&lt;/code&gt; syntax in initializers, kind of rule of thumb.&lt;/p&gt;

&lt;p&gt;Let’s try it again.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;timeout&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It works. Also notice that we can now provide partial arguments, like only timeout but no message in this case, something we couldn’t with default struct initializer (would have to implement additional initializers).&lt;/p&gt;

&lt;p&gt;Yet there are few things that smell in this code (apart from &lt;code&gt;AnyObject&lt;/code&gt; I suppose).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use of hard-coded string literals like “timeout” is not good, typos happen all the time and it’s quite painful to debug this type of errors.&lt;/li&gt;
  &lt;li&gt;Default &lt;code&gt;case&lt;/code&gt; statement with &lt;code&gt;fatalError&lt;/code&gt; plug.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s now fix both these issues. First we will use a custom enum type for keys.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that’s it not even backed up by a raw &lt;code&gt;String&lt;/code&gt; type, there’s no need for that at the moment.&lt;/p&gt;

&lt;p&gt;Now can rewrite the &lt;code&gt;Options&lt;/code&gt; extension.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DictionaryLiteralConvertible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OptionKey&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnyObject&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dictionaryLiteral&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)...)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Main changes are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;code&gt;OptionKey&lt;/code&gt; for &lt;code&gt;Key&lt;/code&gt; type alias.&lt;/li&gt;
  &lt;li&gt;Get rid of &lt;code&gt;default:&lt;/code&gt; case, wrong key errors are now handled at compile time, not at run time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using the &lt;code&gt;wait&lt;/code&gt; function is now as simple as&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([.&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([.&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Custom timeout failed.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can &lt;a href=&quot;https://github.com/mgrebenets/mgrebenets.github.io/blob/master/assets/scripts/swift-dictionary-literal-convertible.swift&quot;&gt;grab the swift code&lt;/a&gt; and try it yourself in playground or just by running from command line with &lt;code&gt;xcrun swift&lt;/code&gt;.&lt;/p&gt;
</description>
                <link>http://mgrebenets.github.io/swift/2015/01/27/swift-dictionary-literal-convertible</link>
                <guid>http://mgrebenets.github.io/swift/2015/01/27/swift-dictionary-literal-convertible</guid>
                <pubDate>2015-01-27T00:00:00+11:00</pubDate>
        </item>

        <item>
                <title>Swift & Objective-C Interoperability</title>
                <description>
&lt;p&gt;I’ve stumbled on an issue while working on my hobby project. One of the few related to Swift and Objective-C interoperability.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Let’s setup a simple code base.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppKit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseObjCClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSObject&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PureSwiftEnum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AnotherValue&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PureSwiftProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PureSwiftEnum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;CGSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;ObjCSubclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BaseObjCClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PureSwiftProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PureSwiftEnum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;CGSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CGSizeZero&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;where&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PureSwiftProtocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;embeddedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;embeddedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PureSwiftEnum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accessSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;CGSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objectGeneric&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;embeddedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjCSubclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objectGeneric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objectGeneric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There’s pure Swift enum, protocol and a subclass of Objective-C class that adopts pure Swift protocol. By the way, have you ever tried declaring Swift enum with just one case?&lt;/p&gt;

&lt;p&gt;Further on, I declare a generic class with type conforming to pure Swift protocol.&lt;/p&gt;

&lt;p&gt;So what happens if I pass an Objective-C subclass to this generic class initializer?&lt;/p&gt;

&lt;p&gt;To be honest, nothing happens most away. For reasons unknown to me my project compiled and ran. And it was running OK for a while until at some moment it started crashing consistently.&lt;/p&gt;

&lt;p&gt;So the problem in this case is that I’m implicitly checking the conformance of Objective-C object &lt;code&gt;ObjCSubclass&lt;/code&gt; to a non Objective-C (pure Swift) protocol &lt;code&gt;PureSwiftProtocol&lt;/code&gt;. This check occurs when calling &lt;code&gt;return embeddedInstance.value&lt;/code&gt; where &lt;code&gt;embeddedInstance&lt;/code&gt; is an instance of &lt;code&gt;ObjCSubclass&lt;/code&gt; but the access to it’s property happens by converting it to &lt;code&gt;PureSwiftProtocol&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Apparently, this is a known issue. There’s a couple of discussions on StackOverflow (&lt;a href=&quot;http://stackoverflow.com/questions/24132738/swift-set-delegate-to-self-gives-exc-bad-access&quot;&gt;one&lt;/a&gt;, &lt;a href=&quot;http://stackoverflow.com/questions/24174348/calling-method-using-optional-chaining-on-weak-variable-causes-exc-bad-access&quot;&gt;two&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;solution-a-back-to-roots&quot;&gt;Solution A: Back to Roots&lt;/h2&gt;

&lt;p&gt;The first solution is to turn &lt;code&gt;PureSwiftProtocol&lt;/code&gt; into Objective-C protocol by using &lt;code&gt;@objc&lt;/code&gt; notation.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objc&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PureSwiftProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PureSwiftEnum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;CGSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But that won’t make compiler happy because it has no idea how to map &lt;code&gt;PureSwiftEnum&lt;/code&gt; into Objective-C. So you have to take it one step further. You have to declare &lt;code&gt;PureSwiftEnum&lt;/code&gt; as Objective-C enum (with &lt;code&gt;NS_ENUM&lt;/code&gt;), obviously you have to do it in Objective-C header file and properly setup bridging header in your project.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NS_ENUM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PureSwiftEnum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PureSwiftEnumValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PureSwiftEnumAnotherValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;solution-b-wrap-it-up&quot;&gt;Solution B: Wrap it Up&lt;/h2&gt;

&lt;p&gt;If you don’t want to revert back to adding Objective-C code with the hope that Apple eventually fixes this issue in the future, you can try another ugly trick - wrap your Objective-C class with pure Swift class that conforms to the same protocol.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;PureSwiftWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PureSwiftProtocol&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;objcInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjCSubclass&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;objcInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjcSubclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objcInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objcInstance&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PureSwiftEnum&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objcInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;CGSize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;objcInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can pass an instance of &lt;code&gt;PureSwiftWrapper&lt;/code&gt; to &lt;code&gt;GenericClass&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PureSwiftWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;objcInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ObjCSubclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GenericClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;embeddedInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accessValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this setup my crash went away and hadn’t reappeared since then.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Reference to &lt;a href=&quot;https://github.com/mgrebenets/mgrebenets.github.io/blob/master/assets/scripts/swift-objc-interop.swift&quot;&gt;swift-objc-interop.swift&lt;/a&gt; to experiment and run it from command line or in Playground&lt;/p&gt;
</description>
                <link>http://mgrebenets.github.io/swift/2015/01/22/swift--objective-c-interoperability</link>
                <guid>http://mgrebenets.github.io/swift/2015/01/22/swift--objective-c-interoperability</guid>
                <pubDate>2015-01-22T00:00:00+11:00</pubDate>
        </item>

        <item>
                <title>Flappy Swift</title>
                <description>
&lt;p&gt;Yet another clone of &lt;a href=&quot;https://bitbucket.org/i4niac/flappy-swift&quot;&gt;Flappy Bird&lt;/a&gt;. Once again written in Swift.
Accompanied by &lt;a href=&quot;https://bitbucket.org/i4niac/flappy-boo&quot;&gt;Flappy Boo&lt;/a&gt; written in Objective-C.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;https://bitbucket.org/i4niac/flappy-swift/raw/master/Assets/FlappySwift.png&quot; alt=&quot;Flappy Swift&quot; /&gt;
&lt;img src=&quot;https://bitbucket.org/i4niac/flappy-boo/raw/master/Assets/FlappyBoo.png&quot; alt=&quot;Flappy Boo&quot; /&gt;&lt;/p&gt;

</description>
                <link>http://mgrebenets.github.io/swift/2015/01/12/flappy-swift</link>
                <guid>http://mgrebenets.github.io/swift/2015/01/12/flappy-swift</guid>
                <pubDate>2015-01-12T00:00:00+11:00</pubDate>
        </item>

        <item>
                <title>Shark 2 for iOS/OSX</title>
                <description>
&lt;p&gt;SHARK provides libraries for the design of adaptive systems, including methods for linear and nonlinear optimization (e.g., evolutionary and gradient-based algorithms), kernel-based algorithms and neural networks, and other machine learning techniques.&lt;/p&gt;

&lt;p&gt;This script is created to build framework for Shark version 2.3.4.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;To read the full article please &lt;a href=&quot;http://mgrebenets.github.io/shark2-iosx/&quot;&gt;follow the link&lt;/a&gt;.&lt;/p&gt;
</description>
                <link>http://mgrebenets.github.io/references/2014/06/05/shark-2-for-ios</link>
                <guid>http://mgrebenets.github.io/references/2014/06/05/shark-2-for-ios</guid>
                <pubDate>2014-06-05T00:00:00+10:00</pubDate>
        </item>

        <item>
                <title>Install Atlassian CLI with RPM</title>
                <description>
&lt;p&gt;Another follow up to &lt;a href=&quot;/atlassian/2014/05/29/atlassian-cli&quot;&gt;introduction to Atlassian CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This post describes how to create an RPM package for Atlassian CLI to install it on &lt;a href=&quot;http://en.wikipedia.org/wiki/Category:RPM-based_Linux_distributions&quot;&gt;RMP-based Linux distributions&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Jump directly to &lt;a href=&quot;#tldr&quot;&gt;Summary&lt;/a&gt; if just want to grab the end result.&lt;/p&gt;

&lt;h2 id=&quot;why-bother&quot;&gt;Why Bother?&lt;/h2&gt;
&lt;p&gt;Same question as one would as for using &lt;a href=&quot;/atlassian/2014/05/30/atlassian-cli-homebrew&quot;&gt;Homebrew on OSX&lt;/a&gt;. And same answer again - Automation.&lt;/p&gt;

&lt;p&gt;Let’s assume you already use Atlassian CLI Client for number of build tasks, like automatically updating JIRA tickets, Confluence pages, Stash pull requests, etc.&lt;/p&gt;

&lt;p&gt;Let’s further assume that your company has a proper CI environment, for example RPM-based Linux instances running in &lt;a href=&quot;http://aws.amazon.com/&quot;&gt;AWS cloud&lt;/a&gt;. Each instance runs one build agent (slave, node or whatever you call it).&lt;/p&gt;

&lt;p&gt;One of the reasons going into the cloud is scalability, you can go from one to few dozens of identically cloned agents with literally one click of a mouse.&lt;/p&gt;

&lt;p&gt;Normal practice is to refresh those instances repeatedly, e.g. on a 2 weeks schedule, and &lt;em&gt;refresh&lt;/em&gt; in this context means recreating them from scratch. This is when an updated OS image is used for new instances, you can put new updates and packages into this new image to make it available to all build tasks by default without additional installation. For example, you could not just have &lt;a href=&quot;https://rvm.io/&quot;&gt;RVM&lt;/a&gt; installed, but also install few most used rubies for 2.0 and 2.1.&lt;/p&gt;

&lt;p&gt;Preparing new image has a funny name, that is &lt;em&gt;Baking&lt;/em&gt; (remember &lt;em&gt;Brewing&lt;/em&gt;?). What’s amusing, the whole baking process is done by the very same CI setup it will be applied to. Keeping an eye on the whole infrastructure is actually quite a challenge and you would most likely have DevOps or DevSupport team to look after it.&lt;/p&gt;

&lt;p&gt;In any case, to conclude this long passage, one of the reasons to have an RPM package for Atlassian CLI is to be able to bake it into your build agent.&lt;/p&gt;

&lt;h2 id=&quot;create-rpm-spec&quot;&gt;Create RPM Spec&lt;/h2&gt;
&lt;p&gt;Creating and RPM package is very similar to creating Homebrew tap, only in this case instead of Formula you need to create &lt;a href=&quot;http://www.rpm.org/max-rpm/ch-rpm-inside.html&quot;&gt;RPM Spec&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;touch rpm.spec&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s put first lines into the spec&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;%define __spec_install_post %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;nil&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
%define __os_install_post %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;nil&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
%define debug_package %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;nil&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
Summary: nsbogan-atlassian-cli
Name: nsbogan-atlassian-cli
Version: %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;version&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
Release: %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;release&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
License: Atlassian EULA Standard License
Vendor: Bob Swift Software, LLC
Packager: Maksym Grebenets &amp;lt;mgrebenets@gmail.com&amp;gt;
Group: Application/Development
Provides: %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
Requires: java
BuildRoot: %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;_tmppath&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/%&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;-%&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;version&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;-%&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;release&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
Source: %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;-%&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;version&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.tar.gz
BuildArch: %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;arch&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

%description
Atlassian CLI tools by Bob Swift. See https://marketplace.atlassian.com/plugins/org.swift.atlassian.cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First three lines are a result of googling as well ans trial and error process. I’m not an experienced RPM package builder, so there are things that I will have to leave unexplained.&lt;/p&gt;

&lt;p&gt;Next lines are self descriptive. The &lt;code&gt;%{varname}&lt;/code&gt; syntax is the way you can pass variables into RPM spec when using it with &lt;code&gt;rpmbuild&lt;/code&gt;, for example&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.0
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;span class=&quot;c&quot;&gt;# set locale to C&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LC_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C rpmbuild --define &lt;span class=&quot;s2&quot;&gt;&amp;quot;version ${VERSION}&amp;quot;&lt;/span&gt; --define &lt;span class=&quot;s2&quot;&gt;&amp;quot;release ${RELEASE}&amp;quot;&lt;/span&gt; --define &lt;span class=&quot;s2&quot;&gt;&amp;quot;arch noarch&amp;quot;&lt;/span&gt; -bb ~/path/to/rpm.spec&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some of the header attributes worth mentioning separately. For starters the &lt;em&gt;Source:&lt;/em&gt; attribute should point to your source tarball. But it doesn’t have to be a local file, it can be a URL just like Homebrew’s &lt;code&gt;url&lt;/code&gt; attribute. You can then download and unzip it with one call to &lt;a href=&quot;http://www.rpm.org/max-rpm-snapshot/s1-rpm-inside-macros.html&quot;&gt;&lt;code&gt;%setup&lt;/code&gt; macro&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;%prep
%setup&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I myself just found out about it recently and didn’t try it yet. So in this article I’ll do the job of setup macro with shell commands, but this is definitely where improvements should be made.&lt;/p&gt;

&lt;p&gt;Then there’s &lt;code&gt;_tmppath&lt;/code&gt; variable. You will notice later that it’s not passed to RPM script directly anywhere, instead, it’s picked up from a special &lt;code&gt;.rpmmacros&lt;/code&gt; file. You’ll see how it’s used later on.&lt;/p&gt;

&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;
&lt;p&gt;Now it’s time to define install command. It’s again very similar to Homebrew’s install. So I will give here brief description of the steps with the code and for more details you can always get back to &lt;a href=&quot;/atlassian/2014/05/30/atlassian-cli-homebrew&quot;&gt;Homebrew post&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;prepare-and-setup&quot;&gt;Prepare and Setup&lt;/h4&gt;
&lt;p&gt;Since we don’t use &lt;code&gt;%setup&lt;/code&gt; macro, we have to some of the work here.
Remove old build directory, unzip the source tarball and cleanup Windows stuff right away.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;%install
rm -rf %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;buildroot&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
mkdir -p %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;buildroot&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/opt/nsbogan-atlassian-cli
tar -zxvf %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;_sourcedir&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/%&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;-%&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;version&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;.tar.gz -C %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;buildroot&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/opt/nsbogan-atlassian-cli

&lt;span class=&quot;c&quot;&gt;# cleanup windows bats&lt;/span&gt;
rm -f %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;buildroot&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/opt/nsbogan-atlassian-cli/*.bat&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;patch-and-move&quot;&gt;Patch and Move&lt;/h4&gt;
&lt;p&gt;Next is patching time and once patching is over move the files to a proper location (&lt;code&gt;bin&lt;/code&gt; folder). I’ve explained why this is required in the post related to Homebrew formula, so have a peek there.&lt;/p&gt;

&lt;p&gt;When patching we’ll update all the &lt;code&gt;.sh&lt;/code&gt; scripts and put new relative path to JAR files, we’ll also insert proper &lt;code&gt;JAVA_HOME&lt;/code&gt; export in each.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# patch shell scripts, rename and move to bin&lt;/span&gt;
mkdir -p %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;buildroot&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/opt/nsbogan-atlassian-cli/bin
&lt;span class=&quot;c&quot;&gt;# patch .sh files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; file in %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;buildroot&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/opt/nsbogan-atlassian-cli/*.sh&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# patch the path to lib before moving&lt;/span&gt;
    sed -i -e &lt;span class=&quot;s1&quot;&gt;&amp;#39;s,/lib,/../lib,g&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# inset JAVA_HOME export at 2nd line&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# use awk since couldn&amp;#39;t figure out how to do it with sed &amp;#39;2i\ construction&amp;#39;&lt;/span&gt;
    awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;NR==2 {print &amp;quot;[[ -d /usr/java ]] &amp;amp;&amp;amp; export JAVA_HOME=/usr/java/$(ls -1 /usr/java | grep %{java_version} | tail -n1)&amp;quot;} {print}&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &amp;gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.bak &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mv &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.bak &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then it’s time to customize all the Atlassian product URLs as well as put a proper service account username and password if you plan to save keystrokes in the future.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# customize atlassian.sh with products username, password and urls&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;%&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;buildroot&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/opt/nsbogan-atlassian-cli/atlassian.sh
sed -i.bak -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;s/\(.*user=\)&amp;#39;.*&amp;#39;/\1&amp;#39;%{username}&amp;#39;/g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;
sed -i.bak -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;s/\(.*password=\)&amp;#39;.*&amp;#39;/\1&amp;#39;%{password}&amp;#39;/g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# product urls&lt;/span&gt;
sed -i.bak -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;s,\(.*\)https://jira.example.com\(.*\),\1http://jira.nsbogan.com.au\2,g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;
sed -i.bak -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;s,\(.*\)https://bamboo.example.com\(.*\),\1http://bamboo.nsbogan.com.au\2,g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;
sed -i.bak -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;s,\(.*\)https://stash.example.com\(.*\),\1http://stash.nsbogan.com.au\2,g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;
sed -i.bak -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;s,\(.*\)https://confluence.example.com\(.*\),\1http://wiki.nsbogan.com.au\2,g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;
sed -i.bak -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;s,\(.*\)https://fisheye.example.com\(.*\),\1https://fisheye.nsbogan.com.au\2,g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;
sed -i.bak -e &lt;span class=&quot;s2&quot;&gt;&amp;quot;s,\(.*\)https://crubicle.example.com\(.*\),\1https://crubicle.nsbogan.com.au\2,g&amp;quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$filename&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally rename ambiguous &lt;code&gt;all.sh&lt;/code&gt; to &lt;code&gt;atlassian-all.sh&lt;/code&gt; and move all &lt;code&gt;.sh&lt;/code&gt; files to &lt;code&gt;bin&lt;/code&gt; folder. I personally prefer to drop &lt;code&gt;.sh&lt;/code&gt; part from the filename in the process.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# all.sh - rename to atlassian-all.sh before moving&lt;/span&gt;
mv %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;buildroot&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/opt/nsbogan-atlassian-cli/all.sh %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;buildroot&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/opt/nsbogan-atlassian-cli/atlassian-all.sh

&lt;span class=&quot;c&quot;&gt;# move shell files&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; file in %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;buildroot&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/opt/nsbogan-atlassian-cli/*.sh&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# move to bin with renaming&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;BASE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;NEW_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BASE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%.sh&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    chmod +x &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# cat ${file} &amp;gt; $HOME/tmp/$(basename ${file}).txt&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# backwards compatibility (payback for bad decisions)&lt;/span&gt;
    cp &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;buildroot&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/opt/nsbogan-atlassian-cli/bin/atlas-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NEW_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

    mv &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;buildroot&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/opt/nsbogan-atlassian-cli/bin/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;NEW_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# cleanup backup files&lt;/span&gt;
rm -rf *.bak&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;files-and-symlinks&quot;&gt;Files and Symlinks&lt;/h3&gt;
&lt;p&gt;Now it’s time to tell RPM spec which files are part of finall installation.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;%files
/opt/nsbogan-atlassian-cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In post-install stage we want to symlink all the shell scripts and JAR files to a corresponding directory in &lt;code&gt;/usr/local&lt;/code&gt;. The reason behind that is because &lt;code&gt;/usr/local/bin&lt;/code&gt; is already on our &lt;code&gt;PATH&lt;/code&gt; (if not, then add it as described in Homebrew post).&lt;/p&gt;

&lt;p&gt;We also add info for post-uninstall process so it can remove all these symlinks for us.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;%post
&lt;span class=&quot;c&quot;&gt;# link binaries to /usr/local/bin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; file in /opt/nsbogan-atlassian-cli/bin/*&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    ln -fs &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; /usr/local/bin/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# link libraries to /usr/local/bin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; file in /opt/nsbogan-atlassian-cli/lib/*&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    ln -fs &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; /usr/local/lib/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

%postun
&lt;span class=&quot;c&quot;&gt;# unlink binaries&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; file in /opt/nsbogan-atlassian-cli/bin/*&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    rm -f /usr/local/bin/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# unlink libs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; file in /opt/nsbogan-atlassian-cli/lib/*&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    rm -f /usr/local/lib/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;clean&quot;&gt;Clean&lt;/h3&gt;
&lt;p&gt;No comments on this one.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;%clean
rm -rf %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;buildroot&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;changelog&quot;&gt;Changelog&lt;/h3&gt;
&lt;p&gt;Add some change log and you are done with the spec.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;* Feb &lt;span class=&quot;m&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2014&lt;/span&gt; - Maksym Grebenets &amp;lt;mgrebenets@gmail.com&amp;gt; %&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;version&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;-%&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;release&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
- Upgrade to 3.9.0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;build-rpm&quot;&gt;Build RPM&lt;/h2&gt;

&lt;p&gt;It’s time to build an RPM based on the spec we have just came up with.
In this example I’ll use Makefile which helps to present material in more simple and organized way than just shell scripts.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;touch Makefile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Define all the basic configuration, like version, release, Java version, etc.
Note the use of &lt;code&gt;noarch&lt;/code&gt; here for architecture. We are working with collection of JARs and shell scripts, there are no sources files that need any compilation at all, so we specify that we are not building for any particular architecture.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;PACKAGE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; nsbogan-atlassian-cli
&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3.9.0
&lt;span class=&quot;nv&quot;&gt;RELEASE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;span class=&quot;nv&quot;&gt;ARCH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; noarch
&lt;span class=&quot;nv&quot;&gt;NSBOGAN_USERNAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; automation
&lt;span class=&quot;nv&quot;&gt;NSBOGAN_PASSWORD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; automation
&lt;span class=&quot;nv&quot;&gt;JAVA_VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1.6
&lt;span class=&quot;nv&quot;&gt;PACKAGE_URL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; https://marketplace.atlassian.com/download/plugins/org.swift.atlassian.cli/version/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;subst .,,&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Source directory&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SRC_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;src
&lt;span class=&quot;c&quot;&gt;# Distribution directory where the source distributive is located&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DIST_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dist
&lt;span class=&quot;c&quot;&gt;# RPM file name&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RPM_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PACKAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;RELEASE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.rpm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now define step by step what needs to be done using Makefile targets (aka recepies).&lt;/p&gt;

&lt;p&gt;Download the package if it doesn’t exist yet.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;download:
    @echo &lt;span class=&quot;s2&quot;&gt;&amp;quot;Downloading from $(PACKAGE_URL) ...&amp;quot;&lt;/span&gt;
    @mkdir -p &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;SRC_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
    @&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -f &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;SRC_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PACKAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.zip &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; curl -o &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;SRC_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PACKAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.zip --progress -fSL &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;PACKAGE_URL&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then unzip. This place partially explains why I avoided &lt;code&gt;%setup&lt;/code&gt; macro. Setup macro assumes source is a tarball and uses &lt;code&gt;tar&lt;/code&gt; utility to unpack it. But with Atlassian CLI the source is just a &lt;code&gt;.zip&lt;/code&gt; file, so setup macro generates commands that don’t work.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;unzip: download
    @&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;SRC_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; unzip -qox &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PACKAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.zip&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    @&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;SRC_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ln -fFs atlassian-cli-&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0-9&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;* &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PACKAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once unzipped, we also link symbolically versioned folder to &lt;code&gt;${PACKAGE}&lt;/code&gt; file. This makes it easier to write next steps.&lt;/p&gt;

&lt;p&gt;Now pack unzipped file into a tarball. This is all due to specifics of &lt;code&gt;rpmbuild&lt;/code&gt;, it want’s tarball and we have to comply. Put the tarball into distributives directory.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dist: unzip
    @mkdir -p &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;DIST_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/
    @&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;SRC_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PACKAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar -czf ../../&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;DIST_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PACKAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.tar.gz .&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally we can build RPM.&lt;/p&gt;

&lt;p&gt;Still we end up doing some additional work here. &lt;code&gt;rpmbuild&lt;/code&gt; epxects a certain directory structure in it’s root build folder. Once again, we’re pretty much doing the &lt;code&gt;%setup&lt;/code&gt; job here.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We will build an RPM in &lt;code&gt;~/rpmbuild&lt;/code&gt; directory, so we create one with number of required subdirectories (all those names in caps and tmp).&lt;/li&gt;
  &lt;li&gt;Then move tarball to &lt;code&gt;SOURCES&lt;/code&gt; directory&lt;/li&gt;
  &lt;li&gt;Copy our RPM spec to &lt;code&gt;SPECS&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Then add &lt;code&gt;%_topdir&lt;/code&gt; and &lt;code&gt;%_tmppath&lt;/code&gt; to a special &lt;code&gt;~/.rpmmacros&lt;/code&gt; file. &lt;code&gt;rpmbuild&lt;/code&gt; will scan &lt;code&gt;~/.rpmmacros&lt;/code&gt; and pass all picked up values to RPM spec when building it.&lt;/li&gt;
  &lt;li&gt;Finally call rpmbuild passing version, release and all the other vars.
    &lt;ul&gt;
      &lt;li&gt;The &lt;a href=&quot;http://www.rpm.org/max-rpm-snapshot/ch-rpm-b-command.html&quot;&gt;&lt;code&gt;-bb&lt;/code&gt; option&lt;/a&gt; tells &lt;code&gt;rpmbuild&lt;/code&gt; which steps to execute.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Once &lt;code&gt;rpmbuild&lt;/code&gt; is done, copy RPM package to distributives directory.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;rpm: dist
    @echo &lt;span class=&quot;s2&quot;&gt;&amp;quot;Making RPM...&amp;quot;&lt;/span&gt;
    @mkdir -p ~/rpmbuild/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;RPMS,SRPMS,BUILD,SOURCES,SPECS,tmp&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    @cp -f &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;DIST_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PACKAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.tar.gz ~/rpmbuild/SOURCES/
    @cp -f rpm.spec ~/rpmbuild/SPECS/
    @echo &lt;span class=&quot;s2&quot;&gt;&amp;quot;%_topdir ${HOME}/rpmbuild&amp;quot;&lt;/span&gt; &amp;gt; ~/.rpmmacros
    @echo &lt;span class=&quot;s2&quot;&gt;&amp;quot;%_tmppath %_topdir/tmp&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.rpmmacros
    @&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LC_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;C rpmbuild -v --define &lt;span class=&quot;s2&quot;&gt;&amp;quot;version ${VERSION}&amp;quot;&lt;/span&gt; --define &lt;span class=&quot;s2&quot;&gt;&amp;quot;release ${RELEASE}&amp;quot;&lt;/span&gt; --define &lt;span class=&quot;s2&quot;&gt;&amp;quot;arch ${ARCH}&amp;quot;&lt;/span&gt; --define &lt;span class=&quot;s2&quot;&gt;&amp;quot;java_version ${JAVA_VERSION}&amp;quot;&lt;/span&gt; --define &lt;span class=&quot;s2&quot;&gt;&amp;quot;username ${NSBOGAN_USERNAME}&amp;quot;&lt;/span&gt; --define &lt;span class=&quot;s2&quot;&gt;&amp;quot;password ${NSBOGAN_PASSWORD}&amp;quot;&lt;/span&gt; -bb ~/rpmbuild/SPECS/rpm.spec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# copy to dist&lt;/span&gt;
    @cp -f ~/rpmbuild/RPMS/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARCH&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;RPM_FILE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;DIST_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, are you ready to try it?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;make rpm&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I ran it on Fedora 20 as well on a custom Linux distribution running in AWS cloud. Since the package does not depend on architecture, you could in theory build it on OSX machine, but it’s not what I would recommend, getting proper &lt;code&gt;rpmbuild&lt;/code&gt; port configured is not something you enjory very much.&lt;/p&gt;

&lt;h2 id=&quot;install-rpm&quot;&gt;Install RPM&lt;/h2&gt;

&lt;p&gt;To test your installation, use these commands&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# rpm install&lt;/span&gt;
rpm --install --replacepkgs --replacefiles --nosignature --nodigest &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;DIST_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;RPM_FILE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# test rpm install&lt;/span&gt;
rpm --freshen -v --test --replacepkgs --replacefiles --nosignature --nodigest &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;DIST_DIR&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;RPM_FILE&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can hand RPM package over to your Dev Support guys, they’ll put it into local repo and make RPM install a part of bake or post-bake process.&lt;/p&gt;

&lt;p&gt;Yet nothing stops you from creating a CI plan (job) for the Atlassian CLI RPM package itself. You can run &lt;code&gt;make rpm&lt;/code&gt; and test rpm install on the very same build agent this package is targeted for, thus creating yet another “CI Loop”, which is good.&lt;/p&gt;

&lt;h2 id=&quot;a-nametldr-summary&quot;&gt;&lt;a name=&quot;tldr&quot;&gt;&lt;/a&gt; Summary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Create &lt;a href=&quot;https://github.com/mgrebenets/mgrebenets.github.io/blob/master/assets/scripts/nsbogan-atlassian-cli-rpm.spec&quot;&gt;RPM spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;make rpm -f RPMMakefile&lt;/code&gt; using this &lt;a href=&quot;https://github.com/mgrebenets/mgrebenets.github.io/blob/master/assets/scripts/RPMMakefile&quot;&gt;RPMMakefile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://mgrebenets.github.io/atlassian/2014/05/30/atlassian-cli-rpm</link>
                <guid>http://mgrebenets.github.io/atlassian/2014/05/30/atlassian-cli-rpm</guid>
                <pubDate>2014-05-30T00:00:00+10:00</pubDate>
        </item>

        <item>
                <title>Install Atlassian CLI with Homebrew</title>
                <description>
&lt;p&gt;This is a follow up to &lt;a href=&quot;/atlassian/2014/05/29/atlassian-cli&quot;&gt;introduction to Atlassian CLI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post you will learn how to create custom &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; formula, install Atlassian CLI via Homebrew tap and customize tools for you company environment.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;If you don’t care about all the details and steps involved, you can jump right to &lt;a href=&quot;#tldr&quot;&gt;Summary&lt;/a&gt; section.&lt;/p&gt;

&lt;h1 id=&quot;brew&quot;&gt;Brew&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; (aka “brew”) is a missing package manager for OS X.
After you install it, you need to update your &lt;code&gt;PATH&lt;/code&gt;. By default &lt;code&gt;/usr/local/bin&lt;/code&gt; is not in the system path, so modify your &lt;code&gt;~/.bash_profile&lt;/code&gt; before you continue.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# ~/.bash_profile&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;why-brew&quot;&gt;Why Brew?&lt;/h2&gt;
&lt;p&gt;A perfectly valid question. Why would you go into all the trouble of creating formula, when you could just unzip, copy and update &lt;code&gt;PATH&lt;/code&gt;, or even write a simple shell script to do that.&lt;/p&gt;

&lt;p&gt;Well, Homebrew does all that and then much more. After initial installation upgrading the tools is as easy as &lt;code&gt;brew update &amp;amp;&amp;amp; brew upgrade&lt;/code&gt;. It also makes installation and upgrade process easier to other people in your organization. And finally, it’s just cool.&lt;/p&gt;

&lt;h2 id=&quot;ok-lets-brew&quot;&gt;OK, Let’s Brew!&lt;/h2&gt;

&lt;h3 id=&quot;create-formula&quot;&gt;Create Formula&lt;/h3&gt;
&lt;p&gt;You could use &lt;code&gt;brew create &amp;lt;link&amp;gt;&lt;/code&gt; command, but that will create formula in &lt;code&gt;/usr/loca/Library/Formula&lt;/code&gt;. Instead let’s create it manually.&lt;/p&gt;

&lt;p&gt;Let’s say our company is called i4nApps (I know, it’s a weird name…), so create new Ruby file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;touch i4napps-atlassian-cli.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With contents like this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;formula&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;I4nAppsAtlassianCli&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formula&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;3.9.0&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;homepage&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://marketplace.atlassian.com/plugins/org.swift.atlassian.cli&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://marketplace.atlassian.com/download/plugins/org.swift.atlassian.cli/version/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sha1&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;c18174f5dee921f69fedd663bd4a9e330565a7d3&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# TODO:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Test&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;version: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;sx&quot;&gt;%x[ jira ]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These are the basics of brewing.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Your custom formula class needs to subclass &lt;code&gt;Formula&lt;/code&gt; class.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;version&lt;/code&gt; in our case is “3.9.0”, that’s the latest Atlassian CLI Client version at the moment of writing this post.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;homepage&lt;/code&gt; points to &lt;a href=&quot;https://marketplace.atlassian.com/plugins/org.swift.atlassian.cli&quot;&gt;Atlassian Marketplace page&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;url&lt;/code&gt; is used to download source code. Note a bit of tweaking at the end of the link &lt;code&gt;#{version.to_s.delete(&#39;.&#39;)}&lt;/code&gt;, that’s to remove dots.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;sha1&lt;/code&gt; obviously is SHA-1 calculated for file downloaded from &lt;code&gt;url&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# calculate SHA-1&lt;/span&gt;
wget https://marketplace.atlassian.com/download/plugins/org.swift.atlassian.cli/version/390
openssl sha1 atlassian-cli-3.9.0-distribution.zip
&lt;span class=&quot;c&quot;&gt;# SHA1(atlassian-cli-3.9.0-distribution.zip)= c18174f5dee921f69fedd663bd4a9e330565a7d3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;install&lt;/code&gt; method is where you do all the installation magic once the source is downloaded and unzipped.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;test&lt;/code&gt; is used to test formula after installation. Normally you just execute main program installed by the formula, in our case it can be &lt;code&gt;jira&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now let’s take advantage of the fact that Homebrew formula is just a Ruby class and add few more custom lines to use later.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;3.9.0&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;java_version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;JAVA_VERSION&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.6&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;release&lt;/code&gt; will be used for managing multiple releases for same version&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;java_version&lt;/code&gt; will come handy for setting &lt;code&gt;JAVA_HOME&lt;/code&gt; environment variable. Default is “1.6” but you can user &lt;code&gt;JAVA_VERSION&lt;/code&gt; environment variable to override default settings.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Atlassian CLI Client &lt;a href=&quot;https://bobswift.atlassian.net/wiki/display/ACLI/Compatibility+-+3.9&quot;&gt;Compatibility page&lt;/a&gt; claims that “Client requires &lt;strong&gt;Java 1.6&lt;/strong&gt; (recommended) or above.” I have had problems using it with Java 1.7, so in this guide we’ll stick with 1.6.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;install&quot;&gt;&lt;code&gt;install&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Once execution enters &lt;code&gt;install&lt;/code&gt; method, the source is already downloaded and unzipped. Things that you do in &lt;code&gt;install&lt;/code&gt; method occur in temporary directory created by Homebrew.&lt;/p&gt;

&lt;p&gt;This is the place to run things like &lt;code&gt;./configure&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt;. However in our case we have no source code to compile. Atlassian CLI is basically a collection of JAR files with shell wrappers for them.&lt;/p&gt;

&lt;p&gt;Our job is to cleanup first, then patch and rename some scripts and finally move the whole bunch to &lt;code&gt;/usr/local&lt;/code&gt;. &lt;code&gt;/usr/local&lt;/code&gt; is also called &lt;em&gt;prefix&lt;/em&gt;, this is the location where Homebrew installs all packages, additionally there’s a special &lt;code&gt;prefix&lt;/code&gt; variable available in the formula.&lt;/p&gt;

&lt;h4 id=&quot;cleanup&quot;&gt;Cleanup&lt;/h4&gt;
&lt;p&gt;So let’s cleanup. Since we are installing on OSX, we don’t need all the Windows stuff.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Delete Windows batch scripts&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;*.bat&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As an improvement, this could be a good place to remove examples.&lt;/p&gt;

&lt;h4 id=&quot;patch-and-move&quot;&gt;Patch and Move&lt;/h4&gt;

&lt;p&gt;Now it’s the time to mention one of the things done &lt;em&gt;wrong&lt;/em&gt; in Atlassian CLI tools package. There’s a reason for having all those folders like &lt;code&gt;lib&lt;/code&gt;, &lt;code&gt;libexec&lt;/code&gt;, &lt;code&gt;etc&lt;/code&gt; and so on. In Homebrew world each of those folders serves a special purpose. Yet the most important folder of all is missing, that is &lt;code&gt;bin&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Remember that part where you added &lt;code&gt;/usr/local/bin&lt;/code&gt; to your &lt;code&gt;PATH&lt;/code&gt;? When Homebrew installs a package it copies things from temp folder to prefix (&lt;code&gt;/usr/local&lt;/code&gt;), &lt;code&gt;bin&lt;/code&gt; is copied too. Every executable in the &lt;code&gt;bin&lt;/code&gt; becomes available system-wide because of the way you updated &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In case of Atlassian CLI, all the shell scripts are sitting in the root folder, &lt;code&gt;bin&lt;/code&gt; is not there at all. This needs to be fixed. We will do it in 2 steps&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create &lt;code&gt;bin&lt;/code&gt; folder and move scripts to it&lt;/li&gt;
  &lt;li&gt;Patch the scripts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The order doesn’t really matter.
Patching is required because each shell script is a wrapper around JAR file and contains relative path to that JAR. So if you move the shell script, you have to update the relative path as well.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# patch before moving to bin&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;*.sh&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# patch by updating path to lib folder&lt;/span&gt;
    &lt;span class=&quot;sx&quot;&gt;%x[ sed -i -e &amp;#39;s,/lib,/../lib,g&amp;#39; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt; ]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# patch by inserting and setting JAVA_HOME&lt;/span&gt;
    &lt;span class=&quot;sx&quot;&gt;%x[ awk &amp;#39;NR==2 {print &amp;quot;export JAVA_HOME=$(/usr/libexec/java_home -v &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java_version&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;)&amp;quot;} {print}&amp;#39; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt; &amp;gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;.bak &amp;amp;&amp;amp; mv &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;.bak &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt; ]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we replace relative path to &lt;code&gt;lib&lt;/code&gt; with &lt;code&gt;../lib&lt;/code&gt;.
We also set &lt;code&gt;JAVA_HOME&lt;/code&gt; here using &lt;code&gt;java_home&lt;/code&gt; OS X utility and &lt;code&gt;java_version&lt;/code&gt; method. This is to be sure Java version is as we expect it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# move to bin and rename&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bin&amp;quot;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;*.sh&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bin/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.sh&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# all.sh, really? how about atlassian-all?&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mv&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bin/all&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bin/atlassian-all&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We just moved all the &lt;code&gt;.sh&lt;/code&gt; scripts to &lt;code&gt;bin&lt;/code&gt; folder. I also prefer to drop the &lt;code&gt;.sh&lt;/code&gt; part. Finally &lt;code&gt;all&lt;/code&gt; feels too ambiguous, so rename it to &lt;code&gt;atlassian-all&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;install-to-prefix&quot;&gt;Install to Prefix&lt;/h4&gt;

&lt;p&gt;We can finally install everything to prefix (&lt;code&gt;/usr/local&lt;/code&gt;), that’s where &lt;code&gt;prefix&lt;/code&gt; variable is used&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install_metafiles&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;customize&quot;&gt;Customize&lt;/h2&gt;

&lt;p&gt;This part is optional. Unless you customize the scripts you will have to use &lt;code&gt;--server&lt;/code&gt;, &lt;code&gt;--user&lt;/code&gt; and &lt;code&gt;--password&lt;/code&gt; switches each time you call commands, this is to provide server, username and password.&lt;/p&gt;

&lt;p&gt;Of course this can be solved with aliases, but then you’d have to configure aliases on each build box. Anyway, the developers of the CLI package offer you another solution. As I said, this part is optional, if you don’t need customization you can skip to &lt;a href=&quot;#tap-install&quot;&gt;next section&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;atlassian.sh&lt;/code&gt; (which we renamed to &lt;code&gt;atlassian&lt;/code&gt; and moved to &lt;code&gt;bin&lt;/code&gt;) is there for customization. Have a look inside that file&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# - - - - - - - - - - - - - - - - - - - - START CUSTOMIZE FOR YOUR INSTALLATION !!!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;automation&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;automation&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - - - - - - - - - - - - - - - - - - - - - END CUSTOMIZE FOR YOUR INSTALLATION !!!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is where you can customize your Atlassian products username and password, as well as additional JVM settings. That’s usual practice for organizations, you have a special user account (service account) than can access the whole range of products with single username and password.&lt;/p&gt;

&lt;p&gt;And there’s another block of code like this, which is used to customize Atlassian products server urls.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# - - - - - - - - - - - - - - - - - - - - START CUSTOMIZE FOR YOUR INSTALLATION !!!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$application&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;confluence&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;confluence-cli-3.9.0.jar --server https://confluence.example.com --user $user --password $password&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$application&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;jira&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jira-cli-3.9.0.jar --server https://jira.example.com --user $user --password $password&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$application&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;fisheye&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;fisheye-cli-3.9.0.jar --server https://fisheye.example.com --user $user --password $password&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$application&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;crucible&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;crucible-cli-3.9.0.jar --server https://crucible.example.com --user $user --password $password&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$application&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bamboo&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;bamboo-cli-3.9.0.jar --server https://bamboo.example.com --user $user --password $password&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$application&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;stash&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;stash-cli-3.9.0.jar --server https://stash.example.com --user $user --password $password&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$application&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Missing application parameter. Specify an application like confluence, jira, or similar.&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$0 &amp;lt;application name&amp;gt; &amp;lt;application specific parameters&amp;gt;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; -99
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Application $application not found in $0&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; -99
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# - - - - - - - - - - - - - - - - - - - - - END CUSTOMIZE FOR YOUR INSTALLATION !!!&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will need to replace all the &lt;code&gt;https://***.example.com&lt;/code&gt; with your company urls. If you have multiple instances of same product in your organization, you can add another &lt;code&gt;elif&lt;/code&gt; block for that. For example you are in the middle of migration from Confluence server &lt;code&gt;https://confluence.example.com&lt;/code&gt; to a new instance &lt;code&gt;https://confluence.ni.example.com&lt;/code&gt;, for a while you want to be able to use both, so add another block like this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$application&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;confluence&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;confluence-cli-3.9.0.jar --server https://confluence.example.com --user $user --password $password&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$application&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;confluence.ni&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;jira-cli-3.9.0.jar --server https://confluence.ni.example.com --user $user --password $password&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ***&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example there won’t be multiple instances for same product, but it would be possible to customize scripts to handle that case as well.&lt;/p&gt;

&lt;p&gt;So let’s write some Ruby again. For the company called i4nApps we will create a nested class &lt;code&gt;I4nAppsEnv&lt;/code&gt; that will contain all the company specific environment settings.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# nested environment class&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;I4nAppsEnv&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Patch the shell script above&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# @param [String] filename name of shell script to patch&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# system &amp;quot;sed -i -e \&amp;quot;s/\\(.*user=\\)&amp;#39;.*&amp;#39;/\\1&amp;#39;#{env.username}&amp;#39;/g\&amp;quot; #{filename}&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# username and password&lt;/span&gt;
        &lt;span class=&quot;sx&quot;&gt;%x[ sed -i -e &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;s/\\(.*user=\\)&amp;#39;.*&amp;#39;/\\1&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;&amp;#39;/g&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt; ]&lt;/span&gt;
        &lt;span class=&quot;sx&quot;&gt;%x[ sed -i -e &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;s/\\(.*password=\\)&amp;#39;.*&amp;#39;/\\1&amp;#39;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;&amp;#39;/g&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt; ]&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# server urls for products, use internal knowledge that atlassian.sh has links like https://&amp;lt;product&amp;gt;.example.com&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;products&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;sx&quot;&gt;%x[ sed -i -e &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;s,\\(.*\\)https://&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;.example.com\\(.*\\),\\1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;\\2,g&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt; ]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Get list of products for enumeration&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# @return [Array&amp;lt;Symbol&amp;gt;] array of product types&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;products&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:jira&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:bamboo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:confluence&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:fisheye&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:crucible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Atlassian Product servers&lt;/span&gt;
    &lt;span class=&quot;vc&quot;&gt;@@servers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:jira&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://jira.i4napps.com.au&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:bamboo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://bamboo.i4napps.com.au&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:stash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://stash.i4napps.com.au&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:confluence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://wiki.i4napps.com.au&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:fisheye&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://fisheye.i4napps.com.au&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:crucible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;https://crucible.i4napps.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Get server url for product&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# @param [Symbol] product +:jira+, +:bamboo+, +:stash+, +:confluence+, +:fisheye+, +:crucible+&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# @return [String] server url&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;vc&quot;&gt;@@servers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;product&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_sym&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Username for Atlassian servers&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# @note Optionally use ATLASSAIN_USERNAME environment variable when installing&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# @return [String] username&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;username&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ATLAS_USERNAME&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Username for Atlassian servers&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# @note Optionally use ATLASSAIN_PASSWORD environment variable when installing&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# @return [String] password&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;password&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;ATLAS_PASSWORD&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;username&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; methods pick up values from &lt;code&gt;ATLAS_USERNAME&lt;/code&gt; and &lt;code&gt;ATLAS_PASSWORD&lt;/code&gt; environment variables. Set those when running &lt;code&gt;brew install&lt;/code&gt; or &lt;code&gt;brew upgrade&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next the &lt;code&gt;server&lt;/code&gt; method returns server url for each product type.&lt;/p&gt;

&lt;p&gt;Finally &lt;code&gt;patch&lt;/code&gt; method patches the shell script the way we want it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Replace default username and password with values provided via environment variables&lt;/li&gt;
  &lt;li&gt;Replace all the server urls with your company urls&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You have to add one more line to &lt;code&gt;install&lt;/code&gt; method in the formula&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;I4nAppsEnv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;atlassian.sh&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure to put this line &lt;strong&gt;before&lt;/strong&gt; &lt;code&gt;atlassian.sh&lt;/code&gt; is moved and renamed.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The nested class is used because Homebrew only expects one formula file. If you have other files used as an external dependencies, Homebrew will not fetch them from repository when running &lt;code&gt;tap&lt;/code&gt; command.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;push-to-scm&quot;&gt;Push to SCM&lt;/h3&gt;

&lt;p&gt;We are done with the formula. It’s time now to push it to a repository. Whatever is you favorite SCM - use it. In this example we will use Git repository hosted with Stash. For example&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh://git@stash.i4napps.com.au/mobile/i4napps-atlassian-cli.git
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;a-nametap-installtap-install-and-upgrade&quot;&gt;&lt;a name=&quot;tap-install&quot;&gt;&lt;/a&gt;Tap, Install and Upgrade&lt;/h2&gt;

&lt;h3 id=&quot;tap&quot;&gt;Tap&lt;/h3&gt;
&lt;p&gt;One of the ways to install Homebrew packages from custom repositories is to use &lt;a href=&quot;https://github.com/Homebrew/homebrew/wiki/brew-tap&quot;&gt;&lt;em&gt;Taps&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There’s a number of rules to follow when creating your taps. That mostly matters if you plan to share this formula with the rest of the world. For internal use in your organization you can neglect some of these rules.&lt;/p&gt;

&lt;p&gt;But there’s a trade off as well. Since we didn’t name the tap repository properly, we won’t be able to use tap command like &lt;code&gt;brew tap username/repository&lt;/code&gt;. Instead we will do same actions as &lt;code&gt;tap&lt;/code&gt; does only with few lines of shell script.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;brew tap&lt;/code&gt; clones the repository from GitHub and puts it into the taps directory. This is how you can do it directly&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;TAP_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;i4napps-atlassian-cli
&lt;span class=&quot;c&quot;&gt;# find out what&amp;#39;s the tap directory&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TAP_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(brew --repository)/Library/Taps/${TAP_NAME}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# clone the formula repository to tap directory&lt;/span&gt;
git clone --quiet ssh://git@stash.i4napps.com.au/mobile/i4napps-atlassian-cli.git &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TAP_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# tell brew to repair the taps, that will make brew to pick up newly added tap&lt;/span&gt;
brew tap --repair&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;install-1&quot;&gt;Install&lt;/h3&gt;

&lt;p&gt;Now you can install, this part is simple&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# no username/password customization&lt;/span&gt;
brew install i4napps-atlassian-cli
&lt;span class=&quot;c&quot;&gt;# set username/password for service account&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ATLAS_USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;i4niac &lt;span class=&quot;nv&quot;&gt;ATLAS_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;password brew install i4napps-app-tools&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;upgrade&quot;&gt;Upgrade&lt;/h3&gt;

&lt;p&gt;To upgrade you need to update brew repositories, including the taps, then upgrade the specific package.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# update brew&lt;/span&gt;
brew update
&lt;span class=&quot;c&quot;&gt;# upgrade i4napps atlassian cli&lt;/span&gt;
brew upgrade i4napps-atlassian-cli
&lt;span class=&quot;c&quot;&gt;# customized upgrade&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ATLAS_USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;i4niac &lt;span class=&quot;nv&quot;&gt;ATLAS_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;password brew upgrade i4napps-atlassian-cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;a-nametldr-summary&quot;&gt;&lt;a name=&quot;tldr&quot;&gt;&lt;/a&gt; Summary&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Create formula Ruby file and put it into a repository
&lt;a href=&quot;https://github.com/mgrebenets/mgrebenets.github.io/blob/master/assets/scripts/i4napps-atlassian-cli.rb&quot;&gt;i4napps-atlassian-cli.rb&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a Homebrew tap, install and upgrade&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;TAP_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;i4napps-atlassian-cli
&lt;span class=&quot;c&quot;&gt;# find out what&amp;#39;s the tap directory&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TAP_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(brew --repository)/Library/Taps/${TAP_NAME}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# clone the formula repository to tap directory&lt;/span&gt;
git clone --quiet ssh://git@stash.i4napps.com.au/mobile/i4napps-atlassian-cli.git &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TAP_DIR&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# tell brew to repair the taps, that will make brew to pick up newly added tap&lt;/span&gt;
brew tap --repair

&lt;span class=&quot;c&quot;&gt;# install&lt;/span&gt;
brew install i4napps-atlassian-cli
&lt;span class=&quot;c&quot;&gt;# or customized install&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ATLAS_USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;i4niac &lt;span class=&quot;nv&quot;&gt;ATLAS_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;password brew install i4napps-atlassian-cli

&lt;span class=&quot;c&quot;&gt;# update&lt;/span&gt;
brew update
&lt;span class=&quot;c&quot;&gt;# then upgrade&lt;/span&gt;
brew upgrade i4napps-atlassian-cli
&lt;span class=&quot;c&quot;&gt;# or customized upgrade&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ATLAS_USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;i4niac &lt;span class=&quot;nv&quot;&gt;ATLAS_PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;password brew upgrade i4napps-atlassian-cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
                <link>http://mgrebenets.github.io/atlassian/2014/05/30/atlassian-cli-homebrew</link>
                <guid>http://mgrebenets.github.io/atlassian/2014/05/30/atlassian-cli-homebrew</guid>
                <pubDate>2014-05-30T00:00:00+10:00</pubDate>
        </item>

        <item>
                <title>Share Xcode Schemes</title>
                <description>
&lt;p&gt;So you are facing one of these Xcode errors where it tells you that there’s no such scheme? This post could help to explain why Xcode does it and how to solve this problem.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;shared-vs-user-schemes&quot;&gt;Shared vs User Schemes&lt;/h1&gt;

&lt;p&gt;While setting up build server for iOS app I have faced this issue multitude of times. Xcode schemes can be either shared or not. By default schemes are not shared and are owned by a user that creates them.&lt;/p&gt;

&lt;p&gt;Here’s how it looks in Xcode, note the last column with checkboxes.
&lt;img src=&quot;/assets/images/schemes-list.png&quot; alt=&quot;Manage Schemes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you look inside &lt;code&gt;kartoteka-reloaded.xcodeproj&lt;/code&gt; folder you will see how Xcode stores the schemes.
Here’s how it looks when &lt;code&gt;kartoteka-reloaded.xcscheme&lt;/code&gt; is not shared&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;kartoteka-reloaded.xcodeproj/
├── project.pbxproj
├── project.xcworkspace
│   └── contents.xcworkspacedata
├── xcshareddata
│   └── xcschemes
└── xcuserdata
    └── grebenetsm.xcuserdatad
        └── xcschemes
            ├── kartoteka-reloaded.xcscheme
            └── xcschememanagement.plist&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let’s tick the “Shared” checkbox then list directory contents again&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;kartoteka-reloaded.xcodeproj/
├── project.pbxproj
├── project.xcworkspace
│   └── contents.xcworkspacedata
├── xcshareddata
│   └── xcschemes
│       └── kartoteka-reloaded.xcscheme
└── xcuserdata
    └── grebenetsm.xcuserdatad
        └── xcschemes
            └── xcschememanagement.plist&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how the &lt;code&gt;kartoteka-reloaded.xcscheme&lt;/code&gt; moved from user data folder to shared data folder. This is basically what makes scheme a shared one.&lt;/p&gt;

&lt;p&gt;The general practice for Xcode projects &lt;code&gt;.gitignore&lt;/code&gt; file is to ignore user data&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# .gitignore&lt;/span&gt;
xcuserdata/
*.xcuserdatad&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So when you check out source code on a build box, there won’t be any user schemes inside &lt;code&gt;.xcodeproj&lt;/code&gt; folder and &lt;code&gt;xcodebuild&lt;/code&gt; won’t be able to see the schemes and will fail to build them.&lt;/p&gt;

&lt;h1 id=&quot;solution&quot;&gt;Solution&lt;/h1&gt;

&lt;p&gt;You can solve this problem either manually or automatically.&lt;/p&gt;

&lt;p&gt;Of course you can just talk to devs and ask them to share the scheme. Done!
You can even do this change yourself and create pull request with changes.&lt;/p&gt;

&lt;p&gt;But this approach will not work in some cases. For example, if you want to run UI automation tests with Calabash, the steps are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Duplicate existing Xcode target and name new test target with &lt;code&gt;-cal&lt;/code&gt; suffix&lt;/li&gt;
  &lt;li&gt;Add Calabash framework to test target&lt;/li&gt;
  &lt;li&gt;Build &lt;code&gt;-cal&lt;/code&gt; test target and run tests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first step is done with &lt;code&gt;calabash-ios setup&lt;/code&gt; command. When new target is created a scheme is created for it as well. This is the default setting for all Xcode projects and in this post we’ll assume that’s the way you have it configured as well.&lt;/p&gt;

&lt;p&gt;Now the tricky part, it doesn’t matter if original scheme was shared, the new &lt;code&gt;-cal&lt;/code&gt; scheme will not be shared. That means you won’t be able to build it from command line.&lt;/p&gt;

&lt;p&gt;Since it all happens on a build box as part of a build plan, you can’t push anything back to the repository, you have to find a way to make this new scheme shared right now.&lt;/p&gt;

&lt;p&gt;The answer to your problems comes from Ruby world. In particular the &lt;a href=&quot;https://rubygems.org/gems/xcodeproj&quot;&gt;xcodeproj&lt;/a&gt; Ruby gem. This is an incredibly handy library to work with Xcode projects and workspaces. You can do pretty much anything you need, create and modify targets and schemes, add new files to targets, modify build settings and other properties, and, of course, share schemes. By the way, &lt;code&gt;xcodeproj&lt;/code&gt; is used by &lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj&quot;&gt;CocoaPods&lt;/a&gt; and that says a lot.&lt;/p&gt;

&lt;p&gt;Go ahead and install the gem&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;sudo&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; gem install xcodeproj&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now create a simple Ruby file, name it whatever you want&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# share_schemes.rb&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;xcodeproj&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xcproj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Xcodeproj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;MyProject.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xcproj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recreate_user_schemes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xcproj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is it! Put your Xcode project name in there, then run and the scheme will be shared.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;chmod +x share_schemes.rb
./share_schemes.rb&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;caveats&quot;&gt;Caveats&lt;/h1&gt;
&lt;p&gt;It sounds to good to be true, right?
There’s a number of situations where shaing a scheme via Ruby script will not work as expected.&lt;/p&gt;

&lt;p&gt;If your Xcode project already has a shared scheme, then you will end up having one scheme from user’s data directory and another one form &lt;code&gt;xcshareddata&lt;/code&gt;. Xcode IDE will pick up both and that’s the reason why you see same scheme twice with project name in parentheses.
&lt;img src=&quot;/assets/images/duplicated-schemes-list.png&quot; alt=&quot;Manage Schemes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s not very bad and doesn’t normally cause any problems. Until that moment of time when you modify one scheme and forget about another. The best way to avoid this problem is to share schemes from day 1, Xcode will not create user schemes then.&lt;/p&gt;

&lt;p&gt;The real trouble begins if you didn’t have any shared schemes and the scheme that you want to recreate and share is linked to a test target. That’s the default configuration for unit tests. So the problem is that &lt;code&gt;xcodeproj&lt;/code&gt; &lt;a href=&quot;https://github.com/CocoaPods/Xcodeproj/issues/139&quot;&gt;doesn’t recreate dependencies to test target&lt;/a&gt;. If you run a &lt;code&gt;xcodebuild test&lt;/code&gt; action you’ll be surprised to see it failing. Unfortunately there isn’t an easy workaround for this problem, so you’d better share those schemes manually and commit changes to source control system.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;Surely the Ruby script can be improved, you’d want to pass Xcode project name as an argument or even look it up automatically.&lt;/p&gt;

&lt;p&gt;As usual, in Summary I just provide file listing with a solution ready to copy-paste. Here’s more advanced Ruby script for your use. You can just get the file directly if you’d like, &lt;a href=&quot;https://github.com/mgrebenets/mgrebenets.github.io/blob/master/assets/scripts/share-schemes.rb&quot;&gt;share-schemes.rb&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# share_schemes.rb&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;optparse&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ostruct&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;xcodeproj&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;colorize&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;fileutils&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Option parser&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OptionParser&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Parse options&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# @param [Array&amp;lt;String&amp;gt;] args command line args&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# @return [OpenStruct] parsed options&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OpenStruct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;opt_parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OptionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;banner&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Usage: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; [options]&amp;quot;&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;-p [PROJECT]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;--project [PROJECT]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Xcode project path. Automatically look up if not provided.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;separator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Help:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on_tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;-h&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;--help&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Display this help&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;opt_parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# parse()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;OptionParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Lookup for Xcode project other than Pods&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# @return [String] name of Xcode project or nil if not found&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lookup_project&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Looking for Xcode project...&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# list all .xcodeproj files except Pods&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;projects_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_with?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Pods.xcodeproj&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;projects_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;projects_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# lookup if not specificed&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lookup_project&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Error&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;underline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;: No Xcode projects found in the working folder&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Using project path: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;xcproj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Xcodeproj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xcproj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recreate_user_schemes&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xcproj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Right, this is one of those cases where actual meaningful code is very small (just 4 lines), the rest is options parsing and error checking, but then it’s worth it in the end.&lt;/p&gt;

&lt;p&gt;Finally run it&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;chmod +x share_schemes.rb
./share_schemes.rb -p &lt;span class=&quot;s2&quot;&gt;&amp;quot;MyProject.xcodeproj&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;ps&quot;&gt;P.S.&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/14368938/xcodebuild-says-does-not-contain-scheme&quot;&gt;Related thread&lt;/a&gt; on StackOverflow.&lt;/p&gt;

</description>
                <link>http://mgrebenets.github.io/xcode/2014/05/29/share-xcode-schemes</link>
                <guid>http://mgrebenets.github.io/xcode/2014/05/29/share-xcode-schemes</guid>
                <pubDate>2014-05-29T00:00:00+10:00</pubDate>
        </item>

        <item>
                <title>Build Android in the Cloud</title>
                <description>
&lt;p&gt;In this example, you are given a task to build Android app on a 64-bit AWS Linux build agent running in Amazon Cloud (AWS).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;install-android-sdk&quot;&gt;Install Android SDK&lt;/h1&gt;

&lt;p&gt;You have to start with installing Android SDK first.&lt;/p&gt;

&lt;h2 id=&quot;download&quot;&gt;Download&lt;/h2&gt;
&lt;p&gt;Start with downloading latest Linux version, found on &lt;a href=&quot;https://developer.android.com/sdk/index.html&quot;&gt;this page&lt;/a&gt;. You can find direct link to tarball in “DOWNLOAD FOR OTHER PLATFORMS” section.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget http://dl.google.com/android/android-sdk_r22.6.2-linux.tgz&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;extract-and-move&quot;&gt;Extract and Move&lt;/h2&gt;
&lt;p&gt;Extract it and put in preferred location, in this example it’s &lt;code&gt;/usr/local/opt/android-sdk&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# extract&lt;/span&gt;
tar xzf android-sdk_r22.6.2-linux.tgz
&lt;span class=&quot;c&quot;&gt;# move&lt;/span&gt;
mv android-sdk-linux /usr/local/opt/android-sdk&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;configure-path&quot;&gt;Configure PATH&lt;/h2&gt;
&lt;p&gt;Now configure &lt;code&gt;ANDROID_HOME&lt;/code&gt; and update the path. That is done by modifying &lt;code&gt;~/.bash_profile&lt;/code&gt;, create the file if you don’t have it yet.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ANDROID_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/opt/android-sdk
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$ANDROID_HOME&lt;/span&gt;/tools
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$ANDROID_HOME&lt;/span&gt;/platform-tools
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; -d &lt;span class=&quot;nv&quot;&gt;$ANDROID_HOME&lt;/span&gt;/build-tools &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;ANDROID_BUILD_TOOLS_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dirname &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;find &lt;span class=&quot;nv&quot;&gt;$ANDROID_HOME&lt;/span&gt;/build-tools -name aapt &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tail -1&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Android Built Tools located: $ANDROID_BUILD_TOOLS_HOME&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ANDROID_BUILD_TOOLS_HOME&lt;/span&gt;:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You noticed that adding Android Build Tools to the path is optional. That’s because we didn’t install Build Tools yet.&lt;/p&gt;

&lt;h2 id=&quot;update-android-sdk&quot;&gt;Update Android SDK&lt;/h2&gt;

&lt;p&gt;This is where you update Android SDK, install all the tools and APIs, including Build Tools and Android Support Repository and Library. Remember, this Linux instance is running in the AWS Cloud meaning it’s headless (no GUI) and you only can work with the shell.&lt;/p&gt;

&lt;p&gt;If you happened to read older version of this article, you’d remember seeing a lot of shell scripts using &lt;code&gt;grep&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a revised version, with much simpler and cleaner code.&lt;/p&gt;

&lt;p&gt;The command that does the job is &lt;code&gt;android update sdk&lt;/code&gt;. You need to use &lt;code&gt;--filter&lt;/code&gt; option to specify list of packages you need to update or install. To get readable identifiers of all available packages, run the following command&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;android list sdk --all --extended&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;--extended&lt;/code&gt; flag is used to display extended information about each package, including a human readable identifier. &lt;code&gt;--all&lt;/code&gt; is needed to include extra packages, like build tools, by default they won’t be listed. Here’s an example output.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;----------
id: &lt;span class=&quot;m&quot;&gt;3&lt;/span&gt; or &lt;span class=&quot;s2&quot;&gt;&amp;quot;build-tools-20.0.0&amp;quot;&lt;/span&gt;
     Type: BuildTool
     Desc: Android SDK Build-tools, revision 20
----------
id: &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt; or &lt;span class=&quot;s2&quot;&gt;&amp;quot;build-tools-19.1.0&amp;quot;&lt;/span&gt;
     Type: BuildTool
     Desc: Android SDK Build-tools, revision 19.1
----------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can now compose filter as a comma-separated list of all package identifiers you want to install. Since it’s a headless build box, you will have to use &lt;code&gt;--no-ui&lt;/code&gt; option, and &lt;code&gt;--all&lt;/code&gt; is needed to include extra packages.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;FILTER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tool,platform,android-20,build-tools-20.0.0,android-19,android-19.0.1
android update sdk --no-ui --all --filter &lt;span class=&quot;nv&quot;&gt;$FILTER&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This example installs &lt;em&gt;Android SDK Tools&lt;/em&gt;, &lt;em&gt;Platform tools&lt;/em&gt;, &lt;em&gt;Build tools&lt;/em&gt; versions &lt;em&gt;20.0.0&lt;/em&gt; and &lt;em&gt;19.0.1&lt;/em&gt;, as well as &lt;em&gt;SDK Platform 19&lt;/em&gt; and &lt;em&gt;20&lt;/em&gt;. Customize the list to your needs using proper identifiers.&lt;/p&gt;

&lt;h3 id=&quot;answering-the-prompts&quot;&gt;Answering the Prompts&lt;/h3&gt;
&lt;p&gt;But it’s not done yet. When installing or updating, you will have to accept license prompts. Each package can have it’s own license requiring you to answer a prompt with “y”.&lt;/p&gt;

&lt;p&gt;You’d probably think of &lt;code&gt;yes&lt;/code&gt; command line utility designed for this particular task. However it will not work. &lt;code&gt;yes&lt;/code&gt; outputs “y” to stdout too often with no options to put delays in between. Android SDK update tool expects not just “y”, but a “y” followed by return key, in other words, it expects “y\n” string as a whole. I don’t know the exact mechanics of &lt;code&gt;yes&lt;/code&gt; command, but if you try something like this&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;FILTER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tool,platform,android-20,build-tools-20.0.0,android-19,android-19.0.1
yes &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; android update sdk --no-ui --all --filter &lt;span class=&quot;nv&quot;&gt;$FILTER&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;you will see that the license prompt will complain about incorrect input and fail after a number of attempts.&lt;/p&gt;

&lt;p&gt;The solution is to put certain delay between “y” outputs to stdout. This code I found on the web, it’s reliable and does the job.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;FILTER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tool,platform,android-20,build-tools-20.0.0,android-19,android-19.0.1
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; sleep &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; sleep 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;y&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; android update sdk --no-ui --all &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --filter &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FILTER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;project-specific-sdk-update&quot;&gt;Project Specific SDK Update&lt;/h3&gt;
&lt;p&gt;If you have various Android projects, each with it’s own requirements for Android packages, it would be reasonable to add Android SDK update task to the project’s build configuration. In this example I will use Gradle, so here’s an example of Gradle task&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;task updateSDK&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;: Exec&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    ext.filter &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;tool,platform-tool,android-20,build-tools-20.0.0,android-19,build-tools-19.1.0,build-tools-19.0.1,extra-android-support,extra-android-m2repository,extra-google-m2repository,extra-google-google_play_services,extra-google-google_play_services_froyo&amp;quot;&lt;/span&gt;
    commandLine &lt;span class=&quot;s2&quot;&gt;&amp;quot;sh&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;-c&amp;quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&amp;quot;( sleep 5 &amp;amp;&amp;amp; while [ 1 ]; do sleep 1; echo y; done ) \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    | android update sdk --no-ui --all \&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;    --filter ${filter}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;caveats&quot;&gt;Caveats&lt;/h3&gt;
&lt;p&gt;The last and very annoying bit, is that this script seems to update packages even if they are already installed. At the moment I have no clue what’s causing this behavior and what’s the best workaround. When it comes to running this script on one of the Bamboo agents in the cloud it doesn’t really matter, but when the script runs on one and only Mac build agent you have - this really slows down each build.&lt;/p&gt;

&lt;h1 id=&quot;install-32-bit-libraries&quot;&gt;Install 32-bit Libraries&lt;/h1&gt;
&lt;p&gt;Before you try to build anything, you have to do one more thing.&lt;/p&gt;

&lt;p&gt;Remember, the host OS is 64-bit Linux system. Android requires a bunch of 32-bit libraries and you have to install them. The Linux system in question is RPM-based so this example uses &lt;code&gt;yum&lt;/code&gt; command, change it to &lt;code&gt;apt-get&lt;/code&gt; or another package manager specific for your OS.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# install 32-bit libraries&lt;/span&gt;
sudo yum install glibc.i686, zlib.i686, libstdc++.so.6 libz.so.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you’re good to go!&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;This is a TLDR or a summary section, that simply lists the solution “as is”.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# install 32-bit libraries&lt;/span&gt;
sudo yum install glibc.i686, zlib.i686, libstdc++.so.6 libz.so.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# update Android SDK on headless server&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FILTER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tool,platform,android-20,build-tools-20.0.0,android-19,android-19.0.1
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; sleep &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; sleep 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;y&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; android update sdk --no-ui --all &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --filter &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;FILTER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
                <link>http://mgrebenets.github.io/android/2014/05/29/build-android-in-the-cloud</link>
                <guid>http://mgrebenets.github.io/android/2014/05/29/build-android-in-the-cloud</guid>
                <pubDate>2014-05-29T00:00:00+10:00</pubDate>
        </item>

        <item>
                <title>Atlassian CLI Client</title>
                <description>
&lt;p&gt;If you happen to use Atlassian products like JIRA, Bamboo, Stash, Confluence, etc., you may be surprised to know that all these products are backed by a handy command line interface, namely &lt;a href=&quot;https://bobswift.atlassian.net/wiki/display/ACLI/Atlassian+Command+Line+Interface&quot;&gt;Atlassian Command Line Interface&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Imagine opening, modifying and closing JIRA issues from command line. What about starting Bamboo build plans, opening and closing Stash pull requests, updating Wiki pages?&lt;/p&gt;

&lt;p&gt;“Why would I do that?” you would ask. Indeed, there’s not much benefit to automate these things for you as a user, unless you are some bash addict. However, stop for a moment and think “Automation” and you’ll see how many things a basic shell script can do. All you need is Java and shell interpreter, which are present on any decent build box.&lt;/p&gt;

&lt;p&gt;Atlassian CLI Client is available on &lt;a href=&quot;https://marketplace.atlassian.com/plugins/org.swift.atlassian.cli&quot;&gt;Atlassian Marketplace&lt;/a&gt;. It is not developed by Atlassian though, which is very important to know if you plan to use it.&lt;/p&gt;

&lt;p&gt;This is where the confusion between Atlassian CLI &lt;em&gt;Plugin&lt;/em&gt; and Atlassian CLI &lt;em&gt;Client&lt;/em&gt; needs to be cleared up.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Plugin&lt;/em&gt; is &lt;strong&gt;not free&lt;/strong&gt; and should be purchased for Atlassian products, e.g. there’s CLI plugin for JIRA, Bamboo, Stash. This basically a UI for command line tools.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Client&lt;/em&gt; (command line tools) can be freely downloaded and installed. You can find a few outdated Homebrew formulas on GitHub that automate client installation. So you might easily assume that it’s free, but it’s not!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You must purchase a license at least for one of the Atlassian CLI Plugins in order to use the Client.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The purpose of this post is to introduce you to Atlassian CLI Plugin if you dont’t know about it yet. The plugin is &lt;a href=&quot;https://bobswift.atlassian.net/wiki/display/ACLI/Atlassian+CLI+General+Documentation&quot;&gt;very&lt;/a&gt; &lt;a href=&quot;https://bobswift.atlassian.net/wiki/display/ACLI/Installation+and+Use&quot;&gt;well&lt;/a&gt; &lt;a href=&quot;https://bobswift.atlassian.net/wiki/display/ACLI/How+to&quot;&gt;documented&lt;/a&gt; and comes with tons of &lt;a href=&quot;https://bobswift.atlassian.net/wiki/display/ACLI/Examples&quot;&gt;examples&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The thing that I didn’t like about it is installation process. It’s a straightforward “download, move, update &lt;code&gt;PATH&lt;/code&gt;” process. There’s nothing bad in the process itself, but when you need to roll out CLI tools on a dozen of build agents, you start looking for a better way.&lt;/p&gt;

&lt;p&gt;So I follow up this post with 2 more&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/atlassian/2014/05/30/atlassian-cli-homebrew&quot;&gt;Install Atlassian CLI with Homebrew&lt;/a&gt; (OS X)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/atlassian/2014/05/30/atlassian-cli-rpm&quot;&gt;Install Atlassian CLI from RPM&lt;/a&gt; (Linux)&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://mgrebenets.github.io/atlassian/2014/05/29/atlassian-cli</link>
                <guid>http://mgrebenets.github.io/atlassian/2014/05/29/atlassian-cli</guid>
                <pubDate>2014-05-29T00:00:00+10:00</pubDate>
        </item>


</channel>
</rss>
